/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LoadingBarService } from '@ngx-loading-bar/core';
import { Injectable } from '@angular/core';
import { finalize } from 'rxjs/operators';
var LoadingBarInterceptor = /** @class */ (function () {
    function LoadingBarInterceptor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    LoadingBarInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        /** @type {?} */
        var r = next.handle(req);
        /** @type {?} */
        var started = false;
        /** @type {?} */
        var responseSubscribe = r.subscribe.bind(r);
        r.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, tslib_1.__spread(args));
        };
        return r.pipe(finalize(function () { return started && _this.loadingBar.complete(); }));
    };
    LoadingBarInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoadingBarInterceptor.ctorParameters = function () { return [
        { type: LoadingBarService }
    ]; };
    return LoadingBarInterceptor;
}());
export { LoadingBarInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoadingBarInterceptor.prototype.loadingBar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWxvYWRpbmctYmFyL2h0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibG9hZGluZy1iYXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUxQztJQUVFLCtCQUFvQixVQUE2QjtRQUE3QixlQUFVLEdBQVYsVUFBVSxDQUFtQjtJQUFHLENBQUM7Ozs7OztJQUVyRCx5Q0FBUzs7Ozs7SUFBVCxVQUFVLEdBQXFCLEVBQUUsSUFBaUI7UUFBbEQsaUJBbUJDO1FBbEJDLGtEQUFrRDtRQUNsRCxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDdkMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNwRjs7WUFFSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7O1lBRXRCLE9BQU8sR0FBRyxLQUFLOztZQUNiLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsU0FBUyxHQUFHO1lBQUMsY0FBTztpQkFBUCxVQUFPLEVBQVAscUJBQU8sRUFBUCxJQUFPO2dCQUFQLHlCQUFPOztZQUNwQixLQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3hCLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDZixPQUFPLGlCQUFpQixnQ0FBSSxJQUFJLEdBQUU7UUFDcEMsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUNYLFFBQVEsQ0FBQyxjQUFNLE9BQUEsT0FBTyxJQUFJLEtBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEVBQXJDLENBQXFDLENBQUMsQ0FDdEQsQ0FBQztJQUNKLENBQUM7O2dCQXZCRixVQUFVOzs7O2dCQU5GLGlCQUFpQjs7SUE4QjFCLDRCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F2QlkscUJBQXFCOzs7Ozs7SUFDcEIsMkNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9hZGluZ0JhclNlcnZpY2UgfSBmcm9tICdAbmd4LWxvYWRpbmctYmFyL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBIYW5kbGVyLCBIdHRwUmVxdWVzdCwgSHR0cEV2ZW50VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGZpbmFsaXplIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9hZGluZ0JhckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2FkaW5nQmFyOiBMb2FkaW5nQmFyU2VydmljZSkge31cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xODE1NVxuICAgIGlmIChyZXEuaGVhZGVycy5oYXMoJ2lnbm9yZUxvYWRpbmdCYXInKSkge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcS5jbG9uZSh7IGhlYWRlcnM6IHJlcS5oZWFkZXJzLmRlbGV0ZSgnaWdub3JlTG9hZGluZ0JhcicpIH0pKTtcbiAgICB9XG5cbiAgICBjb25zdCByID0gbmV4dC5oYW5kbGUocmVxKTtcblxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgY29uc3QgcmVzcG9uc2VTdWJzY3JpYmUgPSByLnN1YnNjcmliZS5iaW5kKHIpO1xuICAgIHIuc3Vic2NyaWJlID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHRoaXMubG9hZGluZ0Jhci5zdGFydCgpO1xuICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzcG9uc2VTdWJzY3JpYmUoLi4uYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybiByLnBpcGUoXG4gICAgICBmaW5hbGl6ZSgoKSA9PiBzdGFydGVkICYmIHRoaXMubG9hZGluZ0Jhci5jb21wbGV0ZSgpKSxcbiAgICApO1xuICB9XG59XG4iXX0=