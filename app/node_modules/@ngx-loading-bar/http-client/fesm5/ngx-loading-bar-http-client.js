import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { __spread } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { finalize } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingBarInterceptor = /** @class */ (function () {
    function LoadingBarInterceptor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    LoadingBarInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        /** @type {?} */
        var r = next.handle(req);
        /** @type {?} */
        var started = false;
        /** @type {?} */
        var responseSubscribe = r.subscribe.bind(r);
        r.subscribe = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.loadingBar.start();
            started = true;
            return responseSubscribe.apply(void 0, __spread(args));
        };
        return r.pipe(finalize(function () { return started && _this.loadingBar.complete(); }));
    };
    LoadingBarInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoadingBarInterceptor.ctorParameters = function () { return [
        { type: LoadingBarService }
    ]; };
    return LoadingBarInterceptor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingBarHttpClientModule = /** @class */ (function () {
    function LoadingBarHttpClientModule() {
    }
    LoadingBarHttpClientModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        HttpClientModule,
                        LoadingBarModule,
                    ],
                    exports: [
                        HttpClientModule,
                        LoadingBarModule,
                    ],
                    providers: [
                        { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                    ],
                },] }
    ];
    return LoadingBarHttpClientModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoadingBarHttpClientModule, LoadingBarInterceptor as Éµa };

//# sourceMappingURL=ngx-loading-bar-http-client.js.map