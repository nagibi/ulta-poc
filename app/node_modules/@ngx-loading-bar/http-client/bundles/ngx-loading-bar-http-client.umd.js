(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common/http'), require('@ngx-loading-bar/core'), require('@angular/core'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngx-loading-bar/http-client', ['exports', '@angular/common/http', '@ngx-loading-bar/core', '@angular/core', 'rxjs/operators'], factory) :
    (factory((global['ngx-loading-bar'] = global['ngx-loading-bar'] || {}, global['ngx-loading-bar']['http-client'] = {}),global.ng.common.http,global.core,global.ng.core,global.rxjs.operators));
}(this, (function (exports,http,core,core$1,operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoadingBarInterceptor = /** @class */ (function () {
        function LoadingBarInterceptor(loadingBar) {
            this.loadingBar = loadingBar;
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        LoadingBarInterceptor.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                var _this = this;
                // https://github.com/angular/angular/issues/18155
                if (req.headers.has('ignoreLoadingBar')) {
                    return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
                }
                /** @type {?} */
                var r = next.handle(req);
                /** @type {?} */
                var started = false;
                /** @type {?} */
                var responseSubscribe = r.subscribe.bind(r);
                r.subscribe = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    _this.loadingBar.start();
                    started = true;
                    return responseSubscribe.apply(void 0, __spread(args));
                };
                return r.pipe(operators.finalize(function () { return started && _this.loadingBar.complete(); }));
            };
        LoadingBarInterceptor.decorators = [
            { type: core$1.Injectable }
        ];
        /** @nocollapse */
        LoadingBarInterceptor.ctorParameters = function () {
            return [
                { type: core.LoadingBarService }
            ];
        };
        return LoadingBarInterceptor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoadingBarHttpClientModule = /** @class */ (function () {
        function LoadingBarHttpClientModule() {
        }
        LoadingBarHttpClientModule.decorators = [
            { type: core$1.NgModule, args: [{
                        imports: [
                            http.HttpClientModule,
                            core.LoadingBarModule,
                        ],
                        exports: [
                            http.HttpClientModule,
                            core.LoadingBarModule,
                        ],
                        providers: [
                            { provide: http.HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                        ],
                    },] }
        ];
        return LoadingBarHttpClientModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.LoadingBarHttpClientModule = LoadingBarHttpClientModule;
    exports.Éµa = LoadingBarInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-loading-bar-http-client.umd.js.map