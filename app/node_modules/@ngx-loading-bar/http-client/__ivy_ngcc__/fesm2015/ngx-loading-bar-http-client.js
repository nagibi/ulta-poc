import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { finalize } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-loading-bar/core';
class LoadingBarInterceptor {
    /**
     * @param {?} loadingBar
     */
    constructor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        /** @type {?} */
        const r = next.handle(req);
        /** @type {?} */
        let started = false;
        /** @type {?} */
        const responseSubscribe = r.subscribe.bind(r);
        r.subscribe = (...args) => {
            this.loadingBar.start();
            started = true;
            return responseSubscribe(...args);
        };
        return r.pipe(finalize(() => started && this.loadingBar.complete()));
    }
}
LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) { return new (t || LoadingBarInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.LoadingBarService)); };
LoadingBarInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarInterceptor, factory: LoadingBarInterceptor.ɵfac });
/** @nocollapse */
LoadingBarInterceptor.ctorParameters = () => [
    { type: LoadingBarService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LoadingBarService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingBarHttpClientModule {
}
LoadingBarHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LoadingBarHttpClientModule });
LoadingBarHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LoadingBarHttpClientModule_Factory(t) { return new (t || LoadingBarHttpClientModule)(); }, providers: [
        { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
    ], imports: [[
            HttpClientModule,
            LoadingBarModule,
        ],
        HttpClientModule,
        LoadingBarModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, { imports: function () { return [HttpClientModule,
        LoadingBarModule]; }, exports: function () { return [HttpClientModule,
        LoadingBarModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{
        type: NgModule,
        args: [{
                imports: [
                    HttpClientModule,
                    LoadingBarModule,
                ],
                exports: [
                    HttpClientModule,
                    LoadingBarModule,
                ],
                providers: [
                    { provide: HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LoadingBarHttpClientModule, LoadingBarInterceptor as ɵa };

//# sourceMappingURL=ngx-loading-bar-http-client.js.map