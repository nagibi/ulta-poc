/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LoadingBarService } from '@ngx-loading-bar/core';
import { Injectable } from '@angular/core';
import { finalize } from 'rxjs/operators';
export class LoadingBarInterceptor {
    /**
     * @param {?} loadingBar
     */
    constructor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        /** @type {?} */
        const r = next.handle(req);
        /** @type {?} */
        let started = false;
        /** @type {?} */
        const responseSubscribe = r.subscribe.bind(r);
        r.subscribe = (...args) => {
            this.loadingBar.start();
            started = true;
            return responseSubscribe(...args);
        };
        return r.pipe(finalize(() => started && this.loadingBar.complete()));
    }
}
LoadingBarInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LoadingBarInterceptor.ctorParameters = () => [
    { type: LoadingBarService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LoadingBarInterceptor.prototype.loadingBar;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGluZy1iYXIuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4LWxvYWRpbmctYmFyL2h0dHAtY2xpZW50LyIsInNvdXJjZXMiOlsibG9hZGluZy1iYXIuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzFDLE1BQU0sT0FBTyxxQkFBcUI7Ozs7SUFDaEMsWUFBb0IsVUFBNkI7UUFBN0IsZUFBVSxHQUFWLFVBQVUsQ0FBbUI7SUFBRyxDQUFDOzs7Ozs7SUFFckQsU0FBUyxDQUFDLEdBQXFCLEVBQUUsSUFBaUI7UUFDaEQsa0RBQWtEO1FBQ2xELElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsRUFBRTtZQUN2QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3BGOztjQUVLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7WUFFdEIsT0FBTyxHQUFHLEtBQUs7O2NBQ2IsaUJBQWlCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEIsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNmLE9BQU8saUJBQWlCLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUM7UUFFRixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ1gsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQ3RELENBQUM7SUFDSixDQUFDOzs7WUF2QkYsVUFBVTs7OztZQU5GLGlCQUFpQjs7Ozs7OztJQVFaLDJDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvYWRpbmdCYXJTZXJ2aWNlIH0gZnJvbSAnQG5neC1sb2FkaW5nLWJhci9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEludGVyY2VwdG9yLCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QsIEh0dHBFdmVudFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvYWRpbmdCYXJJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9hZGluZ0JhcjogTG9hZGluZ0JhclNlcnZpY2UpIHt9XG5cbiAgaW50ZXJjZXB0KHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMTgxNTVcbiAgICBpZiAocmVxLmhlYWRlcnMuaGFzKCdpZ25vcmVMb2FkaW5nQmFyJykpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEuY2xvbmUoeyBoZWFkZXJzOiByZXEuaGVhZGVycy5kZWxldGUoJ2lnbm9yZUxvYWRpbmdCYXInKSB9KSk7XG4gICAgfVxuXG4gICAgY29uc3QgciA9IG5leHQuaGFuZGxlKHJlcSk7XG5cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHJlc3BvbnNlU3Vic2NyaWJlID0gci5zdWJzY3JpYmUuYmluZChyKTtcbiAgICByLnN1YnNjcmliZSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICB0aGlzLmxvYWRpbmdCYXIuc3RhcnQoKTtcbiAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlU3Vic2NyaWJlKC4uLmFyZ3MpO1xuICAgIH07XG5cbiAgICByZXR1cm4gci5waXBlKFxuICAgICAgZmluYWxpemUoKCkgPT4gc3RhcnRlZCAmJiB0aGlzLmxvYWRpbmdCYXIuY29tcGxldGUoKSksXG4gICAgKTtcbiAgfVxufVxuIl19