{"version":3,"sources":["webpack:///src/app/pages/auth/auth.module.ts","webpack:///src/app/pages/auth/auth.routing.module.ts","webpack:///src/app/pages/auth/components/recuperar-senha/recuperar-senha.component.ts","webpack:///src/app/pages/auth/components/recuperar-senha/recuperar-senha.component.html","webpack:///src/app/pages/auth/components/registrar/registrar.component.ts","webpack:///src/app/pages/auth/components/registrar/registrar.component.html"],"names":["AuthModule","forChild","imports","declarations","providers","ROUTES","path","component","children","redirectTo","pathMatch","canActivate","data","title","AuthRoutingModule","exports","RecuperarSenhaComponent","fb","translateService","toastService","authService","router","activeRoute","alertService","messageService","modalService","isLoader","usuarioLogadoValue","navigate","ROTA","msgsError","criarForm","controls","form","invalid","Object","keys","forEach","controlName","markAsTouched","create","group","email","compose","required","validar","dadosForm","value","recuperarSenha","subscribe","resp","message","setControlInvalid","erro","submit","selector","templateUrl","styleUrls","RegistrarComponent","qtdCaracters","nome","minLength","maxLength","senha","confirmarSenha","validator","usuario","registrar"],"mappings":"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","file":"pages-auth-auth-routing-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthComponent } from './auth.component';\nimport { CoreModule } from 'src/app/core/core.module';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { LoginComponent } from './components/login/login.component';\nimport { RecuperarSenhaComponent } from './components/recuperar-senha/recuperar-senha.component';\nimport { RegistrarComponent } from './components/registrar/registrar.component';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NgxSelectModule } from 'ngx-select-ex';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgxSelectModule, \n    TranslateModule.forChild(),\n  ],\n  declarations: [\n    AuthComponent,\n    LoginComponent,\n    RecuperarSenhaComponent,\n    RegistrarComponent,\n  ],\n  providers: [\n    \n  ],\n})\nexport class AuthModule {}\n","import { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RecuperarSenhaComponent } from './components/recuperar-senha/recuperar-senha.component';\nimport { RegistrarComponent } from './components/registrar/registrar.component';\nimport { AuthModule } from './auth.module';\nimport { NgModule } from '@angular/core';\nimport { AuthComponent } from './auth.component';\n\nconst ROUTES: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      {\n        path:'',\n        redirectTo: 'login',\n        pathMatch:'full'\n      },\n      {\n        path: 'login',\n        canActivate: [],\n        component: LoginComponent,\n        data: {\n          title: 'Login',\n        },\n      },\n      {\n        path: 'recuperar-senha',\n        canActivate: [],\n        component: RecuperarSenhaComponent,\n        data: {\n          title: 'Recuperar Senha',\n        },\n      },\n      {\n        path: 'registrar',\n        canActivate: [],\n        component: RegistrarComponent,\n        data: {\n          title: 'Registrar',\n        },\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [\n    AuthModule, \n    RouterModule.forChild(ROUTES)],\n  exports: [\n    RouterModule\n  ],\n})\nexport class AuthRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastService } from 'src/app/core/services/toast.service';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AlertService } from 'src/app/core/services/alert.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { FormBaseComponent } from 'src/app/core/components/form-base/form-base.component';\nimport { AdminComponent } from 'src/app/pages/admin/admin.component';\nimport { LoginComponent } from '../login/login.component';\nimport { MessageService } from 'src/app/core/services/message.service';\nimport { Erro } from 'src/app/core/models/erro.model';\n\n@Component({\n  selector: 'app-recuperar-senha',\n  templateUrl: './recuperar-senha.component.html',\n  styleUrls: ['./recuperar-senha.component.css'],\n})\nexport class RecuperarSenhaComponent extends FormBaseComponent\n  implements OnInit {\n  public static ROTA: string = '/auth/recuperar-senha';\n  public isLoader:boolean=false;\n\n  constructor(\n    protected fb: FormBuilder,\n    protected translateService: TranslateService,\n    protected toastService: ToastService,\n    protected authService: AuthService,\n    protected router: Router,\n    protected activeRoute: ActivatedRoute,\n    protected alertService: AlertService,\n    protected messageService: MessageService,\n    protected modalService: NgbModal\n  ) {\n    super(fb, router, translateService, messageService, modalService);\n\n    if (this.authService.usuarioLogadoValue) {\n      this.router.navigate([AdminComponent.ROTA]);\n    }\n  }\n\n  ngOnInit() {\n    this.msgsError = [];\n\n    this.criarForm();\n  }\n\n  validar(): boolean {\n    var controls = this.form.controls;\n\n    if (this.form.invalid) {\n      Object.keys(controls).forEach((controlName) => {\n        controls[controlName].markAsTouched();\n      });\n\n      this.messageService.create('MSG000034');\n\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  criarForm() {\n    this.form = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.email])],\n    });\n  }\n\n  submit() {\n\n    if (this.validar()) {\n      const dadosForm = this.form.value;\n      const email = dadosForm.email;\n      \n      this.isLoader = true;\n      this.authService.recuperarSenha(email).subscribe(\n        (resp) => {\n          if (resp) {\n            this.messageService.create(resp.message);\n\n            if (resp.message == 'MSG000047') {\n              this.router.navigate([LoginComponent.ROTA]);\n            }else {\n              this.setControlInvalid('email','MSG000071');\n            }\n          }\n          this.isLoader = false;\n        },\n        (erro: Erro) => {\n          this.isLoader = false;\n          this.messageService.create(erro.message);\n        },()=>{\n          this.isLoader = false;\n        }\n      );\n    }\n  }\n}\n","<!--begin::Forgot-->\n<div class=\"login-form login-signin\">\n    <div class=\"text-center mb-10 mb-lg-20\">\n        <h3 class=\"font-size-h1\">{{ \"MSG000007.descricao\" | translate }}</h3>\n        <p class=\"text-muted font-weight-bold\">{{ \"MSG000012.descricao\" | translate }}</p>\n    </div>\n    <!--begin::Form-->\n    <form class=\"form\" novalidate=\"novalidate\" id=\"kt_login_forgot_form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\">\n        <div class=\"form-group\">\n            <input [ngClass]=\"{'is-invalid': isControlInvalid('email')}\" class=\"form-control form-control-solid h-auto py-5 px-6\" type=\"email\" formControlName=\"email\"\n                [placeholder]=\"'MSG000003.descricao' | translate\" autocomplete=\"off\" />\n            <div *ngIf=\"isControlHasError('email', 'required')\" class=\"invalid-feedback\">\n                <p>{{ \"MSG000073.descricao\" | translate }}</p>\n            </div>\n            <div *ngIf=\"isControlHasError('email', 'email')\" class=\"invalid-feedback\">\n                <p>{{ \"MSG000005.descricao\" | translate }}</p>\n            </div>\n            <div *ngIf=\"isControlHasError('email', 'error')\" class=\"invalid-feedback\">\n                <p>{{msgsError['email']}}</p>\n            </div>\n        </div>\n        <div class=\"form-group d-flex flex-wrap flex-center\">\n            <!-- <button type=\"submit\" id=\"kt_login_signin_submit\" class=\"btn btn-primary font-weight-bold px-9 py-4 my-3\">{{ \"MSG000007.descricao\" | translate }}</button> -->\n            <button type=\"submit\" id=\"kt_login_signin_submit\" class=\"btn btn-primary font-weight-bold\" [ngClass]=\"{'spinner spinner-white spinner-right': isLoader }\">{{ \"MSG000007.descricao\" | translate }}</button>\n            <a href=\"javascript:;\" id=\"kt_login_forgot_cancel\" class=\"btn btn-light-primary font-weight-bold px-9 py-4 my-3 mx-4\" routerLink=\"/auth/login\">{{ \"MSG000014.descricao\" | translate }}</a>\n        </div>\n    </form>\n    <!--end::Form-->\n</div>\n<!--end::Forgot-->","import { Component, OnInit } from '@angular/core';\nimport { FormBaseComponent } from 'src/app/core/components/form-base/form-base.component';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MessageService } from 'src/app/core/services/message.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { AdminComponent } from 'src/app/pages/admin/admin.component';\n// import { UsuarioCadastrar } from '../../models/usuario-cadastrar.model';\nimport { confirmarSenhaValidator } from 'src/app/core/validators/confirmar-senha.validator';\nimport { LoginComponent } from '../login/login.component';\nimport { Erro } from 'src/app/core/models/erro.model';\nimport { Usuario, UsuarioAutenticado } from '../../models/usuario.model';\n\n@Component({\n  selector: 'app-registrar',\n  templateUrl: './registrar.component.html',\n  styleUrls: ['./registrar.component.css'],\n})\nexport class RegistrarComponent extends FormBaseComponent implements OnInit {\n  public static ROTA: string = '/auth/registrar';\n  public qtdCaracters = 6;\n  public isLoader: boolean = false;\n\n  constructor(\n    protected fb: FormBuilder,\n    protected translateService: TranslateService,\n    protected authService: AuthService,\n    protected router: Router,\n    protected activeRoute: ActivatedRoute,\n    protected messageService: MessageService,\n    protected modalService: NgbModal\n  ) {\n    super(fb, router, translateService, messageService, modalService);\n\n    if (this.authService.usuarioLogadoValue) {\n      this.router.navigate([AdminComponent.ROTA]);\n    }\n  }\n\n  ngOnInit() {\n    this.msgsError = [];\n\n    this.criarForm();\n  }\n\n  validar(): boolean {\n    var controls = this.form.controls;\n\n    if (this.form.invalid) {\n      Object.keys(controls).forEach((controlName) => {\n        controls[controlName].markAsTouched();\n      });\n\n      this.messageService.create('MSG000034');\n\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  criarForm() {\n    this.form = this.fb.group(\n      {\n        nome: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100),\n          ]),\n        ],\n        email: [\n          '',\n          Validators.compose([Validators.required, Validators.email]),\n        ],\n        senha: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(this.qtdCaracters),\n            Validators.maxLength(this.qtdCaracters),\n          ]),\n        ],\n        confirmarSenha: [\n          '',\n          Validators.compose([\n            Validators.required,\n            Validators.minLength(this.qtdCaracters),\n            Validators.maxLength(this.qtdCaracters),\n          ]),\n        ],\n      },\n      { validator: [confirmarSenhaValidator] }\n    );\n  }\n\n  submit() {\n    if (this.validar()) {\n\n      const dadosForm = this.form.value;\n\n      let usuario = new UsuarioAutenticado();\n      usuario.nome = dadosForm.nome;\n      usuario.email = dadosForm.email;\n      usuario.senha = dadosForm.senha;\n      usuario.confirmarSenha = dadosForm.confirmarSenha;\n\n      this.isLoader = true;\n      this.authService.registrar(usuario).subscribe(\n        (resp) => {\n\n          if (resp) {\n\n            if (resp.message == 'MSG000039') {\n              this.router.navigate([LoginComponent.ROTA]);\n              this.messageService.create(resp.message);\n            } else {\n\n              this.messageService.create(resp.message);\n              this.setControlInvalid('email', 'MSG000072');\n\n              if (resp.message === 'MSG000259') {\n                this.router.navigate([LoginComponent.ROTA]);\n              }\n            }\n          }\n          this.isLoader = false;\n        },\n        (erro: Erro) => {\n          this.isLoader = false;\n          this.messageService.create(erro.message);\n        }, () => {\n          this.isLoader = false;\n        }\n      );\n    }\n  }\n}\n","<!--begin::Forgot-->\n<div class=\"login-form login-signin\">\n    <div class=\"text-center mb-10 mb-lg-20\">\n        <h3 class=\"font-size-h1\">{{ \"MSG000001.descricao\" | translate }}</h3>\n        <p class=\"text-muted font-weight-bold\">{{ \"MSG000015.descricao\" | translate }}</p>\n    </div>\n    <form class=\"form\" novalidate=\"novalidate\" id=\"kt_login_signin_form\" [formGroup]=\"form\" (ngSubmit)=\"submit()\"\n    (keydown.enter)=\"submit(); (false)\">\n    <div class=\"form-group\">\n        <input [ngClass]=\"{'is-invalid': isControlInvalid('nome')}\" class=\"form-control form-control-solid h-auto py-5 px-6\" type=\"email\" formControlName=\"nome\"\n            [placeholder]=\"'MSG000017.descricao' | translate\" autocomplete=\"off\" />\n        <div *ngIf=\"isControlHasError('nome', 'required')\" class=\"invalid-feedback\">\n            <p>{{ \"MSG000073.descricao\" | translate }}</p>\n        </div>\n        <div *ngIf=\"isControlHasError('nome', 'error')\" class=\"invalid-feedback\">\n            <p>{{msgsError['nome']}}</p>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <input [ngClass]=\"{'is-invalid': isControlInvalid('email')}\" class=\"form-control form-control-solid h-auto py-5 px-6\" type=\"email\" formControlName=\"email\"\n            [placeholder]=\"'MSG000003.descricao' | translate\" autocomplete=\"off\" />\n        <div *ngIf=\"isControlHasError('email', 'required')\" class=\"invalid-feedback\">\n            <p>{{ \"MSG000073.descricao\" | translate }}</p>\n        </div>\n        <div *ngIf=\"isControlHasError('email', 'email')\" class=\"invalid-feedback\">\n            <p>{{ \"MSG000005.descricao\" | translate }}</p>\n        </div>\n        <div *ngIf=\"isControlHasError('email', 'error')\" class=\"invalid-feedback\">\n            <p>{{msgsError['email']}}</p>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <input [ngClass]=\"{'is-invalid': isControlInvalid('senha')}\" class=\"form-control form-control-solid h-auto py-5 px-6\" type=\"password\" formControlName=\"senha\"\n            [placeholder]=\"'MSG000008.descricao' | translate\" autocomplete=\"off\" maxlength={{qtdCaracters}} />\n        <div *ngIf=\"isControlHasError('senha', 'required')\" class=\"invalid-feedback\">\n            <p>\n                {{\n                    \"MSG000073.descricao\" | translate: { value: \"strong\" }\n                  }}\n            </p>\n        </div>\n        <div *ngIf=\"\n                  isControlHasError('senha', 'minlength') ||\n                  isControlHasError('senha', 'maxlength')\n                \" class=\"invalid-feedback\">\n            <p>\n                {{\n                    \"MSG000010.descricao\"\n                      | translate: { value: qtdCaracters }\n                  }}\n            </p>\n        </div>\n        <div *ngIf=\"isControlHasError('senha', 'error')\" class=\"invalid-feedback\">\n            <p>{{msgsError['senha']}}</p>\n        </div>\n    </div>\n    <div class=\"form-group\">\n        <input [ngClass]=\"{'is-invalid': isControlInvalid('confirmarSenha')}\" class=\"form-control form-control-solid h-auto py-5 px-6\" type=\"password\" formControlName=\"confirmarSenha\"\n            [placeholder]=\"'MSG000019.descricao' | translate\" autocomplete=\"off\" maxlength={{qtdCaracters}} />\n        <div *ngIf=\"isControlHasError('confirmarSenha', 'required')\" class=\"invalid-feedback\">\n            <p>\n                {{\n                    \"MSG000073.descricao\" | translate: { value: \"strong\" }\n                  }}\n            </p>\n        </div>\n        <div *ngIf=\"\n                  isControlHasError('confirmarSenha', 'minlength') ||\n                  isControlHasError('confirmarSenha', 'maxlength')\n                \" class=\"invalid-feedback\">\n            <p>\n                {{\n                    \"MSG000021.descricao\"\n                      | translate: { value: qtdCaracters }\n                  }}\n            </p>\n        </div>\n        <div *ngIf=\"form.errors?.senhaMismatch\" class=\"invalid-feedback\">\n            <p>{{ \"MSG000022.descricao\" | translate }}</p>\n          </div>\n          <div *ngIf=\"isControlHasError('confirmarsenha', 'error')\" class=\"invalid-feedback\">\n            <p>{{msgsError['confirmarsenha']}}</p>\n        </div>\n    </div>\n        <!--begin::Action-->\n        <div class=\"form-group\">\n            <label class=\"checkbox mb-0\">\n            <input type=\"checkbox\" name=\"agree\" />{{ \"MSG000023.descricao\" | translate }}\n            <a href=\"#\">{{ \"MSG000024.descricao\" | translate }}</a>.\n            <span></span></label>\n        </div>\n        <div class=\"form-group d-flex flex-wrap flex-center\">\n            <!-- <button type=\"submit\" id=\"kt_login_signin_submit\" class=\"btn btn-primary font-weight-bold px-9 py-4 my-3\">{{ \"MSG000052.descricao\" | translate }}</button> -->\n            <button type=\"submit\" id=\"kt_login_signin_submit\" class=\"btn btn-primary font-weight-bold\" [ngClass]=\"{'spinner spinner-white spinner-right': isLoader }\">{{ \"MSG000052.descricao\" | translate }}</button>\n        <a href=\"javascript:;\" id=\"kt_login_forgot_cancel\" class=\"btn btn-light-primary font-weight-bold px-9 py-4 my-3 mx-4\" routerLink=\"/auth/login\">{{ \"MSG000014.descricao\" | translate }}</a>\n        </div>\n        <!--end::Action-->\n    </form>\n    <!--end::Form-->\n</div>\n<!--end::Forgot-->"]}