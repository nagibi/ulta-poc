import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';
import { CropperPosition, Dimensions, ImageCroppedEvent, ImageTransform } from '../interfaces';
import { MoveTypes } from '../interfaces/move-start.interface';
import * as ɵngcc0 from '@angular/core';
export declare class ImageCropperComponent implements OnChanges, OnInit {
    private sanitizer;
    private cd;
    private Hammer;
    private originalImage;
    private transformedImage;
    private originalBase64;
    private transformedBase64;
    private moveStart;
    private originalSize;
    private transformedSize;
    private setImageMaxSizeRetries;
    private cropperScaledMinWidth;
    private cropperScaledMinHeight;
    private exifTransform;
    private autoRotateSupported;
    private stepSize;
    safeImgDataUrl: SafeUrl | string;
    safeTransformStyle: SafeStyle | string;
    marginLeft: SafeStyle | string;
    maxSize: Dimensions;
    imageVisible: boolean;
    moveTypes: typeof MoveTypes;
    wrapper: ElementRef;
    sourceImage: ElementRef;
    imageChangedEvent: any;
    imageURL: string;
    imageBase64: string;
    imageFile: File;
    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';
    maintainAspectRatio: boolean;
    transform: ImageTransform;
    aspectRatio: number;
    resizeToWidth: number;
    resizeToHeight: number;
    cropperMinWidth: number;
    cropperMinHeight: number;
    cropperStaticWidth: number;
    cropperStaticHeight: number;
    canvasRotation: number;
    initialStepSize: number;
    roundCropper: boolean;
    onlyScaleDown: boolean;
    imageQuality: number;
    autoCrop: boolean;
    backgroundColor: string;
    containWithinAspectRatio: boolean;
    hideResizeSquares: boolean;
    cropper: CropperPosition;
    alignImage: 'left' | 'center';
    disabled: boolean;
    imageCropped: EventEmitter<ImageCroppedEvent>;
    startCropImage: EventEmitter<void>;
    imageLoaded: EventEmitter<void>;
    cropperReady: EventEmitter<Dimensions>;
    loadImageFailed: EventEmitter<void>;
    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    private onChangesInputImage;
    private isValidImageChangedEvent;
    private setCssTransform;
    ngOnInit(): void;
    private initCropper;
    private loadImage;
    private loadImageFile;
    private isValidImageType;
    private loadBase64Image;
    private checkExifAndLoadBase64Image;
    private loadImageFromURL;
    private transformOriginalImage;
    private transformImageBase64;
    private getTransformedSize;
    private setTransformedImage;
    imageLoadedInView(): void;
    private checkImageMaxSizeRecursively;
    private sourceImageLoaded;
    onResize(): void;
    private activatePinchGesture;
    private resizeCropperPosition;
    resetCropperPosition(): void;
    keyboardAccess(event: any): void;
    private changeKeyboardStepSize;
    private keyboardMoveCropper;
    private getPositionForKey;
    private getInvertedPositionForKey;
    private getEventForKey;
    startMove(event: any, moveType: MoveTypes, position?: string | null): void;
    startPinch(event: any): void;
    moveImg(event: any): void;
    onPinch(event: any): void;
    private setMaxSize;
    private setCropperScaledMinSize;
    private setCropperScaledMinWidth;
    private setCropperScaledMinHeight;
    private checkCropperPosition;
    moveStop(): void;
    pinchStop(): void;
    private move;
    private resize;
    private checkAspectRatio;
    private doAutoCrop;
    crop(): ImageCroppedEvent | null;
    private getImagePosition;
    private getOffsetImagePosition;
    private cropToBase64;
    private getQuality;
    getResizeRatio(width: number, height: number): number;
    private getClientX;
    private getClientY;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageCropperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ImageCropperComponent, "image-cropper", never, { "format": "format"; "maintainAspectRatio": "maintainAspectRatio"; "transform": "transform"; "aspectRatio": "aspectRatio"; "resizeToWidth": "resizeToWidth"; "resizeToHeight": "resizeToHeight"; "cropperMinWidth": "cropperMinWidth"; "cropperMinHeight": "cropperMinHeight"; "cropperStaticWidth": "cropperStaticWidth"; "cropperStaticHeight": "cropperStaticHeight"; "canvasRotation": "canvasRotation"; "initialStepSize": "initialStepSize"; "roundCropper": "roundCropper"; "onlyScaleDown": "onlyScaleDown"; "imageQuality": "imageQuality"; "autoCrop": "autoCrop"; "containWithinAspectRatio": "containWithinAspectRatio"; "hideResizeSquares": "hideResizeSquares"; "cropper": "cropper"; "alignImage": "alignImage"; "disabled": "disabled"; "imageChangedEvent": "imageChangedEvent"; "imageURL": "imageURL"; "imageBase64": "imageBase64"; "imageFile": "imageFile"; "backgroundColor": "backgroundColor"; }, { "imageCropped": "imageCropped"; "startCropImage": "startCropImage"; "imageLoaded": "imageLoaded"; "cropperReady": "cropperReady"; "loadImageFailed": "loadImageFailed"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlU3R5bGUsIFNhZmVVcmwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IENyb3BwZXJQb3NpdGlvbiwgRGltZW5zaW9ucywgSW1hZ2VDcm9wcGVkRXZlbnQsIEltYWdlVHJhbnNmb3JtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNb3ZlVHlwZXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL21vdmUtc3RhcnQuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEltYWdlQ3JvcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcbiAgICBwcml2YXRlIHNhbml0aXplcjtcbiAgICBwcml2YXRlIGNkO1xuICAgIHByaXZhdGUgSGFtbWVyO1xuICAgIHByaXZhdGUgb3JpZ2luYWxJbWFnZTtcbiAgICBwcml2YXRlIHRyYW5zZm9ybWVkSW1hZ2U7XG4gICAgcHJpdmF0ZSBvcmlnaW5hbEJhc2U2NDtcbiAgICBwcml2YXRlIHRyYW5zZm9ybWVkQmFzZTY0O1xuICAgIHByaXZhdGUgbW92ZVN0YXJ0O1xuICAgIHByaXZhdGUgb3JpZ2luYWxTaXplO1xuICAgIHByaXZhdGUgdHJhbnNmb3JtZWRTaXplO1xuICAgIHByaXZhdGUgc2V0SW1hZ2VNYXhTaXplUmV0cmllcztcbiAgICBwcml2YXRlIGNyb3BwZXJTY2FsZWRNaW5XaWR0aDtcbiAgICBwcml2YXRlIGNyb3BwZXJTY2FsZWRNaW5IZWlnaHQ7XG4gICAgcHJpdmF0ZSBleGlmVHJhbnNmb3JtO1xuICAgIHByaXZhdGUgYXV0b1JvdGF0ZVN1cHBvcnRlZDtcbiAgICBwcml2YXRlIHN0ZXBTaXplO1xuICAgIHNhZmVJbWdEYXRhVXJsOiBTYWZlVXJsIHwgc3RyaW5nO1xuICAgIHNhZmVUcmFuc2Zvcm1TdHlsZTogU2FmZVN0eWxlIHwgc3RyaW5nO1xuICAgIG1hcmdpbkxlZnQ6IFNhZmVTdHlsZSB8IHN0cmluZztcbiAgICBtYXhTaXplOiBEaW1lbnNpb25zO1xuICAgIGltYWdlVmlzaWJsZTogYm9vbGVhbjtcbiAgICBtb3ZlVHlwZXM6IHR5cGVvZiBNb3ZlVHlwZXM7XG4gICAgd3JhcHBlcjogRWxlbWVudFJlZjtcbiAgICBzb3VyY2VJbWFnZTogRWxlbWVudFJlZjtcbiAgICBpbWFnZUNoYW5nZWRFdmVudDogYW55O1xuICAgIGltYWdlVVJMOiBzdHJpbmc7XG4gICAgaW1hZ2VCYXNlNjQ6IHN0cmluZztcbiAgICBpbWFnZUZpbGU6IEZpbGU7XG4gICAgZm9ybWF0OiAncG5nJyB8ICdqcGVnJyB8ICdibXAnIHwgJ3dlYnAnIHwgJ2ljbyc7XG4gICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogYm9vbGVhbjtcbiAgICB0cmFuc2Zvcm06IEltYWdlVHJhbnNmb3JtO1xuICAgIGFzcGVjdFJhdGlvOiBudW1iZXI7XG4gICAgcmVzaXplVG9XaWR0aDogbnVtYmVyO1xuICAgIHJlc2l6ZVRvSGVpZ2h0OiBudW1iZXI7XG4gICAgY3JvcHBlck1pbldpZHRoOiBudW1iZXI7XG4gICAgY3JvcHBlck1pbkhlaWdodDogbnVtYmVyO1xuICAgIGNyb3BwZXJTdGF0aWNXaWR0aDogbnVtYmVyO1xuICAgIGNyb3BwZXJTdGF0aWNIZWlnaHQ6IG51bWJlcjtcbiAgICBjYW52YXNSb3RhdGlvbjogbnVtYmVyO1xuICAgIGluaXRpYWxTdGVwU2l6ZTogbnVtYmVyO1xuICAgIHJvdW5kQ3JvcHBlcjogYm9vbGVhbjtcbiAgICBvbmx5U2NhbGVEb3duOiBib29sZWFuO1xuICAgIGltYWdlUXVhbGl0eTogbnVtYmVyO1xuICAgIGF1dG9Dcm9wOiBib29sZWFuO1xuICAgIGJhY2tncm91bmRDb2xvcjogc3RyaW5nO1xuICAgIGNvbnRhaW5XaXRoaW5Bc3BlY3RSYXRpbzogYm9vbGVhbjtcbiAgICBoaWRlUmVzaXplU3F1YXJlczogYm9vbGVhbjtcbiAgICBjcm9wcGVyOiBDcm9wcGVyUG9zaXRpb247XG4gICAgYWxpZ25JbWFnZTogJ2xlZnQnIHwgJ2NlbnRlcic7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaW1hZ2VDcm9wcGVkOiBFdmVudEVtaXR0ZXI8SW1hZ2VDcm9wcGVkRXZlbnQ+O1xuICAgIHN0YXJ0Q3JvcEltYWdlOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgaW1hZ2VMb2FkZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBjcm9wcGVyUmVhZHk6IEV2ZW50RW1pdHRlcjxEaW1lbnNpb25zPjtcbiAgICBsb2FkSW1hZ2VGYWlsZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBjb25zdHJ1Y3RvcihzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBwcml2YXRlIG9uQ2hhbmdlc0lucHV0SW1hZ2U7XG4gICAgcHJpdmF0ZSBpc1ZhbGlkSW1hZ2VDaGFuZ2VkRXZlbnQ7XG4gICAgcHJpdmF0ZSBzZXRDc3NUcmFuc2Zvcm07XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIGluaXRDcm9wcGVyO1xuICAgIHByaXZhdGUgbG9hZEltYWdlO1xuICAgIHByaXZhdGUgbG9hZEltYWdlRmlsZTtcbiAgICBwcml2YXRlIGlzVmFsaWRJbWFnZVR5cGU7XG4gICAgcHJpdmF0ZSBsb2FkQmFzZTY0SW1hZ2U7XG4gICAgcHJpdmF0ZSBjaGVja0V4aWZBbmRMb2FkQmFzZTY0SW1hZ2U7XG4gICAgcHJpdmF0ZSBsb2FkSW1hZ2VGcm9tVVJMO1xuICAgIHByaXZhdGUgdHJhbnNmb3JtT3JpZ2luYWxJbWFnZTtcbiAgICBwcml2YXRlIHRyYW5zZm9ybUltYWdlQmFzZTY0O1xuICAgIHByaXZhdGUgZ2V0VHJhbnNmb3JtZWRTaXplO1xuICAgIHByaXZhdGUgc2V0VHJhbnNmb3JtZWRJbWFnZTtcbiAgICBpbWFnZUxvYWRlZEluVmlldygpOiB2b2lkO1xuICAgIHByaXZhdGUgY2hlY2tJbWFnZU1heFNpemVSZWN1cnNpdmVseTtcbiAgICBwcml2YXRlIHNvdXJjZUltYWdlTG9hZGVkO1xuICAgIG9uUmVzaXplKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhY3RpdmF0ZVBpbmNoR2VzdHVyZTtcbiAgICBwcml2YXRlIHJlc2l6ZUNyb3BwZXJQb3NpdGlvbjtcbiAgICByZXNldENyb3BwZXJQb3NpdGlvbigpOiB2b2lkO1xuICAgIGtleWJvYXJkQWNjZXNzKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgY2hhbmdlS2V5Ym9hcmRTdGVwU2l6ZTtcbiAgICBwcml2YXRlIGtleWJvYXJkTW92ZUNyb3BwZXI7XG4gICAgcHJpdmF0ZSBnZXRQb3NpdGlvbkZvcktleTtcbiAgICBwcml2YXRlIGdldEludmVydGVkUG9zaXRpb25Gb3JLZXk7XG4gICAgcHJpdmF0ZSBnZXRFdmVudEZvcktleTtcbiAgICBzdGFydE1vdmUoZXZlbnQ6IGFueSwgbW92ZVR5cGU6IE1vdmVUeXBlcywgcG9zaXRpb24/OiBzdHJpbmcgfCBudWxsKTogdm9pZDtcbiAgICBzdGFydFBpbmNoKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG1vdmVJbWcoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25QaW5jaChldmVudDogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIHNldE1heFNpemU7XG4gICAgcHJpdmF0ZSBzZXRDcm9wcGVyU2NhbGVkTWluU2l6ZTtcbiAgICBwcml2YXRlIHNldENyb3BwZXJTY2FsZWRNaW5XaWR0aDtcbiAgICBwcml2YXRlIHNldENyb3BwZXJTY2FsZWRNaW5IZWlnaHQ7XG4gICAgcHJpdmF0ZSBjaGVja0Nyb3BwZXJQb3NpdGlvbjtcbiAgICBtb3ZlU3RvcCgpOiB2b2lkO1xuICAgIHBpbmNoU3RvcCgpOiB2b2lkO1xuICAgIHByaXZhdGUgbW92ZTtcbiAgICBwcml2YXRlIHJlc2l6ZTtcbiAgICBwcml2YXRlIGNoZWNrQXNwZWN0UmF0aW87XG4gICAgcHJpdmF0ZSBkb0F1dG9Dcm9wO1xuICAgIGNyb3AoKTogSW1hZ2VDcm9wcGVkRXZlbnQgfCBudWxsO1xuICAgIHByaXZhdGUgZ2V0SW1hZ2VQb3NpdGlvbjtcbiAgICBwcml2YXRlIGdldE9mZnNldEltYWdlUG9zaXRpb247XG4gICAgcHJpdmF0ZSBjcm9wVG9CYXNlNjQ7XG4gICAgcHJpdmF0ZSBnZXRRdWFsaXR5O1xuICAgIGdldFJlc2l6ZVJhdGlvKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogbnVtYmVyO1xuICAgIHByaXZhdGUgZ2V0Q2xpZW50WDtcbiAgICBwcml2YXRlIGdldENsaWVudFk7XG59XG4iXX0=