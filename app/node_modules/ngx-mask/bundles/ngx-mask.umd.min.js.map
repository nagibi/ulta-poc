{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-mask/lib/config.ts","ng://ngx-mask/lib/mask-applier.service.ts","ng://ngx-mask/lib/mask.service.ts","ng://ngx-mask/lib/mask.directive.ts","ng://ngx-mask/lib/mask.pipe.ts","ng://ngx-mask/lib/ngx-mask.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","create","__read","o","m","ar","error","config","InjectionToken","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","patterns","0","pattern","RegExp","9","optional","X","symbol","A","S","M","H","h","timeMasks","withoutValidation","MaskApplierService","_config","_this","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChar","precision","x","split","decimals","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","precisionRegEx","_charToRegExpExpression","precisionMatch","match","diff","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","_a","mask","customPattern","applyMask","position","cb","cursor","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","arr","cpfCnpjError","startsWith","_stripToDecimal","indexOf","base","thousandSeperatorCharEscaped","decimalMarkerEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","withoutDays","day1monthInput","includes","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","find","val","maskSymbol","idx","join","char","Inject","args","Injectable","MaskService","document","_elementRef","_renderer","_super","isNumberValue","maskIsShown","selStart","selEnd","writingValue","onChange","_formElement","nativeElement","__","constructor","__extends","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","applyValueChanges","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","_b","name","setProperty","checkSpecialCharAmount","removeMask","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","isArray","_checkSymbols","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","DOCUMENT","ElementRef","Renderer2","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","onTouch","ngOnChanges","changes","currentValue","sort","a","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","this_1","lastIndexOf","opt","length_1","onInput","el","_inputValue","_setMask","selectionStart","caretShift","_backspaceShift","positionToApply","_code","_getActualInputLength","setSelectionRange","onBlur","onFocus","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","suffixCheckOnPressDelete","cursorStart","readOnly","ctrlKey","metaKey","writeValue","String","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","onModelChange","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","rowMaskLen","requiredMask","some","Input","HostListener","MaskDirective_1","Directive","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NG_VALIDATORS","MaskPipe","transform","Pipe","pure","NgxMaskModule","forRoot","configValue","ngModule","NgxMaskModule_1","useValue","useFactory","_configFactory","deps","forChild","NgModule","exports","declarations","initConfig","Function"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n  suffix: string;\n  prefix: string;\n  thousandSeparator: string;\n  decimalMarker: '.' | ',';\n  clearIfNotMatch: boolean;\n  showTemplate: boolean;\n  showMaskTyped: boolean;\n  placeHolderCharacter: string;\n  shownMaskExpression: string;\n  dropSpecialCharacters: boolean | string[];\n  specialCharacters: string[];\n  hiddenInput: boolean | undefined;\n  validation: boolean;\n  separatorLimit: string;\n  allowNegativeNumbers: boolean;\n  patterns: {\n    [character: string]: {\n      pattern: RegExp;\n      optional?: boolean;\n      symbol?: string;\n    };\n  };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d'),\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true,\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*',\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]'),\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]'),\n    },\n    d: {\n      pattern: new RegExp('\\\\d'),\n    },\n    m: {\n      pattern: new RegExp('\\\\d'),\n    },\n    M: {\n      pattern: new RegExp('\\\\d'),\n    },\n    H: {\n      pattern: new RegExp('\\\\d'),\n    },\n    h: {\n      pattern: new RegExp('\\\\d'),\n    },\n    s: {\n      pattern: new RegExp('\\\\d'),\n    },\n  },\n};\n\nexport const timeMasks: string[] = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\n\nexport const withoutValidation: string[] = [\n  'percent',\n  'Hh',\n  's0',\n  'm0',\n  'separator',\n  'd0/M0/0000',\n  'd0/M0',\n  'd0',\n  'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\n\nimport { config, IConfig } from './config';\n\n@Injectable()\nexport class MaskApplierService {\n  public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n  public hiddenInput: IConfig['hiddenInput'];\n  public showTemplate!: IConfig['showTemplate'];\n  public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n  public maskExpression: string = '';\n  public actualValue: string = '';\n  public shownMaskExpression: string = '';\n  public maskSpecialCharacters!: IConfig['specialCharacters'];\n  public maskAvailablePatterns!: IConfig['patterns'];\n  public prefix!: IConfig['prefix'];\n  public suffix!: IConfig['suffix'];\n  public thousandSeparator!: IConfig['thousandSeparator'];\n  public decimalMarker!: IConfig['decimalMarker'];\n  public customPattern!: IConfig['patterns'];\n  public ipError?: boolean;\n  public cpfCnpjError?: boolean;\n  public showMaskTyped!: IConfig['showMaskTyped'];\n  public placeHolderCharacter!: IConfig['placeHolderCharacter'];\n  public validation: IConfig['validation'];\n  public separatorLimit: IConfig['separatorLimit'];\n  public allowNegativeNumbers: IConfig['allowNegativeNumbers'];\n\n  private _shift!: Set<number>;\n\n  public constructor(@Inject(config) protected _config: IConfig) {\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n  }\n\n  public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => {}): string {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n    if (!!this.suffix && inputValue.endsWith(this.suffix)) {\n      inputValue = inputValue.slice(0, inputValue.length - this.suffix.length);\n    }\n    const inputArray: string[] = inputValue.toString().split('');\n    if (maskExpression === 'IP') {\n      this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\n      maskExpression = '099.099.099.099';\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i].match('\\\\d')) {\n        arr.push(inputValue[i]);\n      }\n    }\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n      if (arr.length > 11) {\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        maskExpression = '000.000.000-00';\n      }\n    }\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        inputValue = this._stripToDecimal(inputValue);\n        const precision: number = this.getPrecision(maskExpression);\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base: string = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (\n        inputValue.match('[wа-яА-Я]') ||\n        inputValue.match('[ЁёА-я]') ||\n        inputValue.match('[a-z]|[A-Z]') ||\n        inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n        inputValue.match('[^A-Za-z0-9,]')\n      ) {\n        inputValue = this._stripToDecimal(inputValue);\n      }\n\n      inputValue =\n        inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker\n          ? inputValue.slice(1, inputValue.length)\n          : inputValue;\n\n      // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n      const thousandSeperatorCharEscaped: string = this._charToRegExpExpression(this.thousandSeparator);\n      const decimalMarkerEscaped: string = this._charToRegExpExpression(this.decimalMarker);\n      const invalidChars: string = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'\n        .replace(thousandSeperatorCharEscaped, '')\n        .replace(decimalMarkerEscaped, '');\n\n      const invalidCharRegexp: RegExp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision: number = this.getPrecision(maskExpression);\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep: string = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n\n      const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep: number = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n        do {\n          this._shift.add(position + _shift);\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (\n        (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n        (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n      ) {\n        this._shift.clear();\n        backspaceShift = true;\n        shift = shiftStep;\n        position += shiftStep;\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for (\n        // tslint:disable-next-line\n        let i: number = 0, inputSymbol: string = inputArray[0];\n        i < inputArray.length;\n        i++, inputSymbol = inputArray[i]\n      ) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (\n          maskExpression[cursor + 1] === '*' &&\n          multi &&\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n        ) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (\n          maskExpression[cursor + 1] === '?' &&\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n        ) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (\n          this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n          (this.hiddenInput &&\n            this.maskAvailablePatterns[maskExpression[cursor]] &&\n            this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\n        ) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          const daysCount = 31;\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12;\n            // mask without day\n            const withoutDays: boolean =\n              cursor === 0 &&\n              (Number(inputSymbol) > 2 ||\n                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for input\n            const day1monthInput: boolean =\n              inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              ((inputValue[cursor - 2] === '/' &&\n                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                inputValue[cursor] !== '/') ||\n                inputValue[cursor] === '/' ||\n                (inputValue[cursor - 3] === '/' &&\n                  Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                  inputValue[cursor - 1] !== '/') ||\n                inputValue[cursor - 1] === '/');\n            // 10<day<31 && month<12 for input\n            const day2monthInput: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              inputValue[cursor - 1] === '/' &&\n              (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n            // day<10 && month<12 for paste whole data\n            const day1monthPaste: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              !inputValue.slice(cursor - 2, cursor).includes('/') &&\n              Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n            // 10<day<31 && month<12 for paste whole data\n            const day2monthPaste: boolean =\n              Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n              !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n              inputValue[cursor - 1] !== '/' &&\n              Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n              const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n              this._shift.add(shiftStep + this.prefix.length || 0);\n              i--;\n              continue;\n            }\n          }\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n          const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n          this._shift.add(shiftStep + this.prefix.length || 0);\n          i--;\n        } else if (\n          this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n          this.maskAvailablePatterns[maskExpression[cursor]] &&\n          this.maskAvailablePatterns[maskExpression[cursor]].optional\n        ) {\n          if (\n            !!inputArray[cursor] &&\n            maskExpression !== '099.099.099.099' &&\n            maskExpression !== '000.000.000-00' &&\n            maskExpression !== '00.000.000/0000-00'\n          ) {\n            result += inputArray[cursor];\n          }\n          cursor++;\n          i--;\n        } else if (\n          this.maskExpression[cursor + 1] === '*' &&\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n          multi\n        ) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (\n          this.maskExpression[cursor + 1] === '?' &&\n          this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n          this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n          multi\n        ) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (\n          this.showMaskTyped &&\n          this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n          inputSymbol !== this.placeHolderCharacter\n        ) {\n          stepBack = true;\n        }\n      }\n    }\n    if (\n      result.length + 1 === maskExpression.length &&\n      this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n    ) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition: number = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift: number = this._shift.has(position) ? shift : 0;\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n    if (shift < 0) {\n      this._shift.clear();\n    }\n    let res = `${this.prefix}${result}${this.suffix}`;\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n    return res;\n  }\n\n  public _findSpecialChar(inputSymbol: string): undefined | string {\n    return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n  }\n\n  protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return (\n      this.maskAvailablePatterns[maskSymbol] &&\n      this.maskAvailablePatterns[maskSymbol].pattern &&\n      this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n    );\n  }\n\n  private _formatWithSeparators = (\n    str: string,\n    thousandSeparatorChar: string,\n    decimalChar: string,\n    precision: number\n  ) => {\n    const x: string[] = str.split(decimalChar);\n    const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n    let res: string = x[0];\n    const separatorLimit: string = this.separatorLimit.replace(/\\s/g, '');\n    if (separatorLimit && +separatorLimit) {\n      if (res[0] === '-') {\n        res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n      } else {\n        res = res.slice(0, separatorLimit.length);\n      }\n    }\n    const rgx: RegExp = /(\\d+)(\\d{3})/;\n\n    while (thousandSeparatorChar && rgx.test(res)) {\n      res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n    }\n\n    if (precision === undefined) {\n      return res + decimals;\n    } else if (precision === 0) {\n      return res;\n    }\n    return res + decimals.substr(0, precision + 1);\n  };\n\n  private percentage = (str: string): boolean => {\n    return Number(str) >= 0 && Number(str) <= 100;\n  };\n\n  private getPrecision = (maskExpression: string): number => {\n    const x: string[] = maskExpression.split('.');\n    if (x.length > 1) {\n      return Number(x[x.length - 1]);\n    }\n\n    return Infinity;\n  };\n\n  private checkInputPrecision = (\n    inputValue: string,\n    precision: number,\n    decimalMarker: IConfig['decimalMarker']\n  ): string => {\n    if (precision < Infinity) {\n      const precisionRegEx: RegExp = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n\n      const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n      if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n        const diff = precisionMatch[0].length - 1 - precision;\n        inputValue = inputValue.substring(0, inputValue.length - diff);\n      }\n      if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n    }\n    return inputValue;\n  };\n\n  private _stripToDecimal(str: string): string {\n    return str\n      .split('')\n      .filter((i: string, idx: number) => {\n        return i.match('^-?\\\\d') || i === '.' || i === ',' || (i === '-' && idx === 0 && this.allowNegativeNumbers);\n      })\n      .join('');\n  }\n\n  private _charToRegExpExpression(char: string): string {\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n    return char;\n  }\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { config, IConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n  public maskExpression: string = '';\n  public isNumberValue: boolean = false;\n  public placeHolderCharacter: string = '_';\n  public maskIsShown: string = '';\n  public selStart: number | null = null;\n  public selEnd: number | null = null;\n\n  /**\n   * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n   * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n   */\n  public writingValue: boolean = false;\n\n  private _formElement: HTMLInputElement;\n\n  public onChange = (_: any) => {};\n\n  public constructor(\n    @Inject(DOCUMENT) private document: any,\n    @Inject(config) protected _config: IConfig,\n    private _elementRef: ElementRef,\n    private _renderer: Renderer2\n  ) {\n    super(_config);\n    this._formElement = this._elementRef.nativeElement;\n  }\n\n  // tslint:disable-next-line:cyclomatic-complexity\n  public applyMask(inputValue: string, maskExpression: string, position: number = 0, cb: Function = () => {}): string {\n    if (!maskExpression) {\n      return inputValue;\n    }\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n    const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n    if (this.hiddenInput !== undefined) {\n      let actualResult: string[] = this.actualValue.split('');\n      // tslint:disable no-unused-expression\n      inputValue !== '' && actualResult.length\n        ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n          ? inputValue.length > actualResult.length\n            ? actualResult.splice(this.selStart, 0, getSymbol)\n            : inputValue.length < actualResult.length\n            ? actualResult.length - inputValue.length === 1\n              ? actualResult.splice(this.selStart - 1, 1)\n              : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n            : null\n          : null\n        : (actualResult = []);\n      // tslint:enable no-unused-expression\n      newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\n    this.actualValue = this.getActualValue(result);\n\n    // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    }\n\n    // b) remove decimal marker from list of special characters to mask\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== this.decimalMarker);\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n      return result;\n    }\n    const resLen: number = result.length;\n    const prefNmask: string = this.prefix + this.maskIsShown;\n    return (\n      result +\n      (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ' ? prefNmask : prefNmask.slice(resLen))\n    );\n  }\n\n  public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n    this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n    if (this._formElement === this.document.activeElement) {\n      return;\n    }\n    this.clearIfNotMatchFn();\n  }\n\n  public hideInput(inputValue: string, maskExpression: string): string {\n    return inputValue\n      .split('')\n      .map((curr: string, index: number) => {\n        if (\n          this.maskAvailablePatterns &&\n          this.maskAvailablePatterns[maskExpression[index]] &&\n          this.maskAvailablePatterns[maskExpression[index]].symbol\n        ) {\n          return this.maskAvailablePatterns[maskExpression[index]].symbol;\n        }\n        return curr;\n      })\n      .join('');\n  }\n\n  // this function is not necessary, it checks result against maskExpression\n  public getActualValue(res: string): string {\n    const compare: string[] = res\n      .split('')\n      .filter(\n        (symbol: string, i: number) =>\n          this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n          (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n      );\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n    return res;\n  }\n\n  public shiftTypedSymbols(inputValue: string): string {\n    let symbolToReplace = '';\n    const newInputValue: string[] =\n      (inputValue &&\n        inputValue.split('').map((currSymbol: string, index: number) => {\n          if (\n            this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n            inputValue[index + 1] !== this.maskExpression[index + 1]\n          ) {\n            symbolToReplace = currSymbol;\n            return inputValue[index + 1];\n          }\n          if (symbolToReplace.length) {\n            const replaceSymbol: string = symbolToReplace;\n            symbolToReplace = '';\n            return replaceSymbol;\n          }\n          return currSymbol;\n        })) ||\n      [];\n    return newInputValue.join('');\n  }\n\n  public showMaskInInput(inputVal?: string): string {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n    return '';\n  }\n\n  public clearIfNotMatchFn(): void {\n    if (\n      this.clearIfNotMatch &&\n      this.prefix.length + this.maskExpression.length + this.suffix.length !==\n        this._formElement.value.replace(/_/g, '').length\n    ) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(this._formElement.value, this.maskExpression);\n    }\n  }\n\n  public set formElementProperty([name, value]: [string, string | boolean]) {\n    this._renderer.setProperty(this._formElement, name, value);\n  }\n\n  public checkSpecialCharAmount(mask: string): number {\n    const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  public removeMask(inputValue: string): string {\n    return this._removeMask(\n      this._removeSuffix(this._removePrefix(inputValue)),\n      this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter)\n    );\n  }\n\n  private _checkForIp(inputVal: string): string {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n    return '';\n  }\n\n  private _checkForCpfCnpj(inputVal: string): string {\n    const cpf =\n      `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj =\n      `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n      `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === '#') {\n      return cpf;\n    }\n    const arr: string[] = [];\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n    if (arr.length === 11) {\n      return '';\n    }\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n      return cnpj.slice(15, cnpj.length);\n    }\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n    return '';\n  }\n\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n  private formControlResult(inputValue: string): void {\n    if (!this.writingValue) {\n      if (Array.isArray(this.dropSpecialCharacters)) {\n        this.onChange(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters));\n      } else if (this.dropSpecialCharacters) {\n        this.onChange(this._checkSymbols(inputValue));\n      } else {\n        this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n      }\n    }\n  }\n\n  private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  private _removePrefix(value: string): string {\n    if (!this.prefix) {\n      return value;\n    }\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  private _removeSuffix(value: string): string {\n    if (!this.suffix) {\n      return value;\n    }\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  private _retrieveSeparatorValue(result: string): string {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n    return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  private _checkSymbols(result: string): string | number | undefined | null {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision: number | null = this._retrieveSeparatorPrecision(this.maskExpression);\n    let separatorValue: string = this._retrieveSeparatorValue(result);\n    if (this.decimalMarker !== '.') {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n\n    if (this.isNumberValue) {\n      if (separatorPrecision) {\n        if (result === this.decimalMarker) {\n          return null;\n        }\n        return this._checkPrecision(this.maskExpression, separatorValue);\n      } else {\n        return Number(separatorValue);\n      }\n    } else {\n      return separatorValue;\n    }\n  }\n\n  // TODO should think about helpers or separting decimal precision to own property\n  private _retrieveSeparatorPrecision(maskExpretion: string): number | null {\n    const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  private _checkPrecision(separatorExpression: string, separatorValue: string): number | string {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n    return Number(separatorValue);\n  }\n}\n","import {\n  ControlValueAccessor,\n  FormControl,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n} from '@angular/forms';\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { config, IConfig, timeMasks, withoutValidation } from './config';\nimport { MaskService } from './mask.service';\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\n@Directive({\n  selector: 'input[mask], textarea[mask]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MaskDirective),\n      multi: true,\n    },\n    MaskService,\n  ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges, Validator {\n  @Input('mask') public maskExpression: string = '';\n  @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n  @Input() public patterns: IConfig['patterns'] = {};\n  @Input() public prefix: IConfig['prefix'] = '';\n  @Input() public suffix: IConfig['suffix'] = '';\n  @Input() public thousandSeparator: IConfig['thousandSeparator'] = ' ';\n  @Input() public decimalMarker: IConfig['decimalMarker'] = '.';\n  @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n  @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n  @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n  @Input() public placeHolderCharacter: IConfig['placeHolderCharacter'] | null = null;\n  @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n  @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n  @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n  @Input() public validation: IConfig['validation'] | null = null;\n  @Input() public separatorLimit: IConfig['separatorLimit'] | null = null;\n  @Input() public allowNegativeNumbers: IConfig['allowNegativeNumbers'] | null = null;\n  private _maskValue: string = '';\n  private _inputValue!: string;\n  private _position: number | null = null;\n  private _start!: number;\n  private _end!: number;\n  private _code!: string;\n  private _maskExpressionArray: string[] = [];\n\n  public constructor(\n    @Inject(DOCUMENT) private document: any,\n    private _maskService: MaskService,\n    @Inject(config) protected _config: IConfig\n  ) {}\n\n  public onChange = (_: any) => {};\n  public onTouch = () => {};\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n    } = changes;\n    if (maskExpression) {\n      this._maskValue = maskExpression.currentValue || '';\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a: string, b: string) => {\n          return a.length - b.length;\n        });\n        this._maskValue = this._maskExpressionArray[0];\n        this.maskExpression = this._maskExpressionArray[0];\n        this._maskService.maskExpression = this._maskExpressionArray[0];\n      }\n    }\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    }\n    // Only overwrite the mask available patterns if a pattern has actually been passed in\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(\n          (c: string) => c !== '-'\n        );\n      }\n    }\n    this._applyMask();\n  }\n\n  // tslint:disable-next-line: cyclomatic-complexity\n  public validate({ value }: FormControl): ValidationErrors | null {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (\n          this._maskService.maskAvailablePatterns[key].optional &&\n          this._maskService.maskAvailablePatterns[key].optional === true\n        ) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt: string = this._maskValue\n              .split('')\n              .filter((i: string) => i === key)\n              .join('');\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n      if (\n        this._maskValue.indexOf('{') === 1 &&\n        value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4\n      ) {\n        return null;\n      }\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (\n        (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n        (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n        this._maskValue.indexOf('{') === 1\n      ) {\n        return this._createValidationError(value);\n      }\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length: number = this._maskService.dropSpecialCharacters\n          ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n          : this._maskValue.length - counterOfOpt;\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n    return null;\n  }\n\n  @HostListener('input', ['$event'])\n  public onInput(e: CustomKeyboardEvent): void {\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n    const position: number =\n      el.selectionStart === 1\n        ? (el.selectionStart as number) + this._maskService.prefix.length\n        : (el.selectionStart as number);\n    let caretShift = 0;\n    let backspaceShift = false;\n    this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    });\n    // only set the selection if the element is active\n    if (this.document.activeElement !== el) {\n      return;\n    }\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply: number = this._position\n      ? this._inputValue.length + position + caretShift\n      : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n    el.setSelectionRange(positionToApply, positionToApply);\n    if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\n      el.setSelectionRange((el.selectionStart as number) + 1, (el.selectionStart as number) + 1);\n    }\n    this._position = null;\n  }\n\n  @HostListener('blur')\n  public onBlur(): void {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n    this.onTouch();\n  }\n\n  @HostListener('click', ['$event'])\n  public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\n    if (!this._maskValue) {\n      return;\n    }\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    const posStart = 0;\n    const posEnd = 0;\n    if (\n      el !== null &&\n      el.selectionStart !== null &&\n      el.selectionStart === el.selectionEnd &&\n      el.selectionStart > this._maskService.prefix.length &&\n      // tslint:disable-next-line\n      (e as any).keyCode !== 38\n    )\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    const nextValue: string | null =\n      !el.value || el.value === this._maskService.prefix\n        ? this._maskService.prefix + this._maskService.maskIsShown\n        : el.value;\n\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n\n    /** fix of cursor position with prefix when mouse click occur */\n    if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n\n    /** select only inserted text */\n    if ((el.selectionEnd as number) > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  }\n\n  // tslint:disable-next-line: cyclomatic-complexity\n  @HostListener('keydown', ['$event'])\n  public onKeyDown(e: CustomKeyboardEvent): void {\n    if (!this._maskValue) {\n      return;\n    }\n    this._code = e.code ? e.code : e.key;\n    const el: HTMLInputElement = e.target as HTMLInputElement;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n      if (e.keyCode === 8 && (el.selectionStart as number) !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = this.specialCharacters || this._config.specialCharacters;\n        if (this.prefix.length > 1 && (el.selectionStart as number) <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, this.prefix.length);\n        } else {\n          if (this._inputValue.length !== (el.selectionStart as number) && (el.selectionStart as number) !== 1) {\n            while (\n              this.specialCharacters.includes(this._inputValue[(el.selectionStart as number) - 1].toString()) &&\n              ((this.prefix.length >= 1 && (el.selectionStart as number) > this.prefix.length) ||\n                this.prefix.length === 0)\n            ) {\n              el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n            }\n          }\n          this.suffixCheckOnPressDelete(e.keyCode, el);\n        }\n      }\n      this.suffixCheckOnPressDelete(e.keyCode, el);\n      if (\n        this._maskService.prefix.length &&\n        (el.selectionStart as number) <= this._maskService.prefix.length &&\n        (el.selectionEnd as number) <= this._maskService.prefix.length\n      ) {\n        e.preventDefault();\n      }\n      const cursorStart: number | null = el.selectionStart;\n      // this.onFocus(e);\n      if (\n        e.keyCode === 8 &&\n        !el.readOnly &&\n        cursorStart === 0 &&\n        el.selectionEnd === el.value.length &&\n        el.value.length !== 0\n      ) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n    if (\n      !!this.suffix &&\n      this.suffix.length > 1 &&\n      this._inputValue.length - this.suffix.length < (el.selectionStart as number)\n    ) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (\n      (e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n      (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n\n  /** It writes the value in the input */\n  public async writeValue(inputValue: string | number): Promise<void> {\n    if (inputValue === undefined) {\n      inputValue = '';\n    }\n    if (typeof inputValue === 'number') {\n      inputValue = String(inputValue);\n      inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n      this._maskService.isNumberValue = true;\n    }\n    if (\n      (inputValue && this._maskService.maskExpression) ||\n      (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n    ) {\n      // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n      this._maskService.writingValue = true;\n      this._maskService.formElementProperty = [\n        'value',\n        this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n      ];\n      // Let the service know we've finished writing value\n      this._maskService.writingValue = false;\n    } else {\n      this._maskService.formElementProperty = ['value', inputValue];\n    }\n    this._inputValue = inputValue;\n  }\n\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouch = fn;\n  }\n\n  public suffixCheckOnPressDelete(keyCode: number, el: HTMLInputElement): void {\n    if (keyCode === 46 && this.suffix.length > 0) {\n      if (this._inputValue.length - this.suffix.length <= (el.selectionStart as number)) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n    }\n    if (keyCode === 8) {\n      if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < (el.selectionStart as number)) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n      if (this.suffix.length === 1 && this._inputValue.length === (el.selectionStart as number)) {\n        el.setSelectionRange((el.selectionStart as number) - 1, (el.selectionStart as number) - 1);\n      }\n    }\n  }\n\n  /** It disables the input element */\n  public setDisabledState(isDisabled: boolean): void {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  @HostListener('ngModelChange', ['$event'])\n  // tslint:disable-next-line: no-any\n  public onModelChange(e: any): void {\n    if (!e) {\n      this._maskService.actualValue = '';\n    }\n  }\n\n  private _repeatPatternSymbols(maskExp: string): string {\n    return (\n      (maskExp.match(/{[0-9]+}/) &&\n        maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n          this._start = currval === '{' ? index : this._start;\n\n          if (currval !== '}') {\n            return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n          }\n          this._end = index;\n          const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n          const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n          return accum + repaceWith;\n        }, '')) ||\n      maskExp\n    );\n  }\n  // tslint:disable-next-line:no-any\n  private _applyMask(): any {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = [\n      'value',\n      this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n    ];\n  }\n\n  private _validateTime(value: string): ValidationErrors | null {\n    const rowMaskLen: number = this._maskValue.split('').filter((s: string) => s !== ':').length;\n    if (value === null || value.length === 0) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  private _getActualInputLength() {\n    return (\n      this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length\n    );\n  }\n\n  private _createValidationError(actualValue: string): ValidationErrors {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue,\n      },\n    };\n  }\n\n  private _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some((mask) => {\n        const test = this._maskService.removeMask(this._inputValue).length <= this._maskService.removeMask(mask).length;\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n        }\n      });\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n  name: 'mask',\n  pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n  public constructor(private _maskService: MaskApplierService) {}\n\n  public transform(\n    value: string | number,\n    mask: string | [string, IConfig['patterns']],\n    thousandSeparator: string | null = null\n  ): string {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\n\n@NgModule({\n  exports: [MaskDirective, MaskPipe],\n  declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n  public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders<NgxMaskModule> {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [\n        {\n          provide: NEW_CONFIG,\n          useValue: configValue,\n        },\n        {\n          provide: INITIAL_CONFIG,\n          useValue: initialConfig,\n        },\n        {\n          provide: config,\n          useFactory: _configFactory,\n          deps: [INITIAL_CONFIG, NEW_CONFIG],\n        },\n        MaskApplierService,\n      ],\n    };\n  }\n  public static forChild(): ModuleWithProviders<NgxMaskModule> {\n    return {\n      ngModule: NgxMaskModule,\n    };\n  }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n  initConfig: optionsConfig,\n  configValue: optionsConfig | (() => optionsConfig)\n): optionsConfig {\n  return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\n}\n"]}