import * as escapeStringNs from 'escape-string-regexp';
const escapeString = escapeStringNs;
export class NgxSelectOption {
    constructor(value, text, disabled, data, _parent = null) {
        this.value = value;
        this.text = text;
        this.disabled = disabled;
        this.data = data;
        this._parent = _parent;
        this.type = 'option';
        this.cacheRenderedText = null;
    }
    get parent() {
        return this._parent;
    }
    renderText(sanitizer, highlightText) {
        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {
            this.cacheHighlightText = highlightText;
            if (this.cacheHighlightText) {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'));
            }
            else {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);
            }
        }
        return this.cacheRenderedText;
    }
}
export class NgxSelectOptGroup {
    constructor(label, options = []) {
        this.label = label;
        this.options = options;
        this.type = 'optgroup';
        this.filter(() => true);
    }
    filter(callbackFn) {
        this.optionsFiltered = this.options.filter((option) => callbackFn(option));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNlbGVjdC5jbGFzc2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNlbGVjdC1leC8iLCJzb3VyY2VzIjpbIm5neC1zZWxlY3Qvbmd4LXNlbGVjdC5jbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxjQUFjLE1BQU0sc0JBQXNCLENBQUM7QUFHdkQsTUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDO0FBRXBDLE1BQU0sT0FBTyxlQUFlO0lBTXhCLFlBQW1CLEtBQXNCLEVBQ3RCLElBQVksRUFDWixRQUFpQixFQUNqQixJQUFTLEVBQ1IsVUFBNkIsSUFBSTtRQUpsQyxVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUN0QixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ1IsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFUNUMsU0FBSSxHQUF5QixRQUFRLENBQUM7UUFpQnZDLHNCQUFpQixHQUFhLElBQUksQ0FBQztJQVAzQyxDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3hCLENBQUM7SUFLTSxVQUFVLENBQUMsU0FBdUIsRUFBRSxhQUFxQjtRQUM1RCxJQUFJLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxhQUFhLElBQUksSUFBSSxDQUFDLGlCQUFpQixLQUFLLElBQUksRUFBRTtZQUM5RSxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDO1lBQ3hDLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO2dCQUN6QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLHVCQUF1QixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQy9FLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxxQkFBcUIsQ0FDakYsQ0FBQyxDQUFDO2FBQ047aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDekU7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxpQkFBaUI7SUFLMUIsWUFBbUIsS0FBYSxFQUNiLFVBQTZCLEVBQUU7UUFEL0IsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBTHpDLFNBQUksR0FBeUIsVUFBVSxDQUFDO1FBTTdDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUEyQztRQUNyRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBdUIsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEcsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEb21TYW5pdGl6ZXIsIFNhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCAqIGFzIGVzY2FwZVN0cmluZ05zIGZyb20gJ2VzY2FwZS1zdHJpbmctcmVnZXhwJztcbmltcG9ydCB7SU5neFNlbGVjdE9wdEdyb3VwLCBJTmd4U2VsZWN0T3B0aW9uLCBJTmd4U2VsZWN0T3B0aW9uQmFzZSwgVE5neFNlbGVjdE9wdGlvblR5cGV9IGZyb20gJy4vbmd4LXNlbGVjdC5pbnRlcmZhY2VzJztcblxuY29uc3QgZXNjYXBlU3RyaW5nID0gZXNjYXBlU3RyaW5nTnM7XG5cbmV4cG9ydCBjbGFzcyBOZ3hTZWxlY3RPcHRpb24gaW1wbGVtZW50cyBJTmd4U2VsZWN0T3B0aW9uLCBJTmd4U2VsZWN0T3B0aW9uQmFzZSB7XG4gICAgcmVhZG9ubHkgdHlwZTogVE5neFNlbGVjdE9wdGlvblR5cGUgPSAnb3B0aW9uJztcblxuICAgIGhpZ2hsaWdodGVkVGV4dDogU2FmZUh0bWw7XG4gICAgYWN0aXZlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIHZhbHVlOiBudW1iZXIgfCBzdHJpbmcsXG4gICAgICAgICAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgcHVibGljIGRhdGE6IGFueSxcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9wYXJlbnQ6IE5neFNlbGVjdE9wdEdyb3VwID0gbnVsbCkge1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcGFyZW50KCk6IE5neFNlbGVjdE9wdEdyb3VwIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhY2hlSGlnaGxpZ2h0VGV4dDogc3RyaW5nO1xuICAgIHByaXZhdGUgY2FjaGVSZW5kZXJlZFRleHQ6IFNhZmVIdG1sID0gbnVsbDtcblxuICAgIHB1YmxpYyByZW5kZXJUZXh0KHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBoaWdobGlnaHRUZXh0OiBzdHJpbmcpOiBTYWZlSHRtbCB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlSGlnaGxpZ2h0VGV4dCAhPT0gaGlnaGxpZ2h0VGV4dCB8fCB0aGlzLmNhY2hlUmVuZGVyZWRUZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlSGlnaGxpZ2h0VGV4dCA9IGhpZ2hsaWdodFRleHQ7XG4gICAgICAgICAgICBpZiAodGhpcy5jYWNoZUhpZ2hsaWdodFRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlUmVuZGVyZWRUZXh0ID0gc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKCh0aGlzLnRleHQgKyAnJykucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChlc2NhcGVTdHJpbmcodGhpcy5jYWNoZUhpZ2hsaWdodFRleHQpLCAnZ2knKSwgJzxzdHJvbmc+JCY8L3N0cm9uZz4nXG4gICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVSZW5kZXJlZFRleHQgPSBzYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwodGhpcy50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVJlbmRlcmVkVGV4dDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOZ3hTZWxlY3RPcHRHcm91cCBpbXBsZW1lbnRzIElOZ3hTZWxlY3RPcHRHcm91cCwgSU5neFNlbGVjdE9wdGlvbkJhc2Uge1xuICAgIHJlYWRvbmx5IHR5cGU6IFROZ3hTZWxlY3RPcHRpb25UeXBlID0gJ29wdGdyb3VwJztcblxuICAgIHB1YmxpYyBvcHRpb25zRmlsdGVyZWQ6IE5neFNlbGVjdE9wdGlvbltdO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGxhYmVsOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgcHVibGljIG9wdGlvbnM6IE5neFNlbGVjdE9wdGlvbltdID0gW10pIHtcbiAgICAgICAgdGhpcy5maWx0ZXIoKCkgPT4gdHJ1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZpbHRlcihjYWxsYmFja0ZuOiAodmFsdWU6IE5neFNlbGVjdE9wdGlvbikgPT4gYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMub3B0aW9uc0ZpbHRlcmVkID0gdGhpcy5vcHRpb25zLmZpbHRlcigob3B0aW9uOiBOZ3hTZWxlY3RPcHRpb24pID0+IGNhbGxiYWNrRm4ob3B0aW9uKSk7XG4gICAgfVxufVxuXG5leHBvcnQgdHlwZSBUU2VsZWN0T3B0aW9uID0gTmd4U2VsZWN0T3B0R3JvdXAgfCBOZ3hTZWxlY3RPcHRpb247XG4iXX0=