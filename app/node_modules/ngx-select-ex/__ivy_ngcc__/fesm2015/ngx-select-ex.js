import { __decorate, __param } from 'tslib';
import { TemplateRef, Directive, InjectionToken, EventEmitter, IterableDiffers, ChangeDetectorRef, Inject, Optional, Input, Output, ViewChild, ContentChild, HostListener, Component, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { BehaviorSubject, Subject, combineLatest, merge, from, of, EMPTY } from 'rxjs';
import { map, distinctUntilChanged, share, flatMap, toArray, filter, tap } from 'rxjs/operators';
import * as lodashNs from 'lodash';
import * as escapeStringNs from 'escape-string-regexp';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
import * as ɵngcc2 from '@angular/common';

const _c0 = ["main"];
const _c1 = ["input"];
const _c2 = ["choiceMenu"];
function NgxSelectComponent_div_3_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 17);
    ɵngcc0.ɵɵelement(1, "span", 18);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("innerHtml", ctx_r9.placeholder, ɵngcc0.ɵɵsanitizeHtml);
} }
const _c3 = function (a0) { return { "ngx-select__allow-clear": a0 }; };
const _c4 = function (a0, a2) { return { $implicit: a0, index: 0, text: a2 }; };
function NgxSelectComponent_div_3_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 19);
    ɵngcc0.ɵɵelementContainer(1, 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    const _r5 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c3, ctx_r10.allowClear));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r10.templateSelectedOption || _r5)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction2(5, _c4, ctx_r10.optionsSelected[0], ctx_r10.sanitize(ctx_r10.optionsSelected[0].text)));
} }
function NgxSelectComponent_div_3_a_5_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 21);
    ɵngcc0.ɵɵlistener("click", function NgxSelectComponent_div_3_a_5_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.optionRemove(ctx_r12.optionsSelected[0], $event); });
    ɵngcc0.ɵɵelement(1, "i", 22);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r11.setBtnSize());
} }
function NgxSelectComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelementStart(1, "div", 10);
    ɵngcc0.ɵɵlistener("click", function NgxSelectComponent_div_3_Template_div_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.optionsOpen(); });
    ɵngcc0.ɵɵtemplate(2, NgxSelectComponent_div_3_span_2_Template, 2, 1, "span", 11);
    ɵngcc0.ɵɵtemplate(3, NgxSelectComponent_div_3_span_3_Template, 2, 8, "span", 12);
    ɵngcc0.ɵɵelementStart(4, "span", 13);
    ɵngcc0.ɵɵtemplate(5, NgxSelectComponent_div_3_a_5_Template, 2, 1, "a", 14);
    ɵngcc0.ɵɵelement(6, "i", 15);
    ɵngcc0.ɵɵelement(7, "i", 16);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r1.setFormControlSize(ctx_r1.setBtnSize()));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.optionsSelected.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.optionsSelected.length);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.canClearNotMultiple());
} }
const _c5 = function (a0, a1, a2) { return { $implicit: a0, index: a1, text: a2 }; };
function NgxSelectComponent_div_4_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵelementStart(1, "span", 25);
    ɵngcc0.ɵɵlistener("click", function NgxSelectComponent_div_4_span_1_Template_span_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); return $event.stopPropagation(); });
    ɵngcc0.ɵɵelementContainer(2, 20);
    ɵngcc0.ɵɵelementStart(3, "a", 26);
    ɵngcc0.ɵɵlistener("click", function NgxSelectComponent_div_4_span_1_Template_a_click_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const option_r17 = ctx.$implicit; const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.optionRemove(option_r17, $event); });
    ɵngcc0.ɵɵelement(4, "i", 22);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r17 = ctx.$implicit;
    const idx_r18 = ctx.index;
    const ctx_r16 = ɵngcc0.ɵɵnextContext(2);
    const _r5 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r16.setBtnSize());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r16.templateSelectedOption || _r5)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(4, _c5, option_r17, idx_r18, ctx_r16.sanitize(option_r17.text)));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r16.setBtnSize());
} }
function NgxSelectComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r23 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵlistener("click", function NgxSelectComponent_div_4_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r23); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.inputClick(ctx_r22.inputElRef && ctx_r22.inputElRef["value"]); });
    ɵngcc0.ɵɵtemplate(1, NgxSelectComponent_div_4_span_1_Template, 5, 8, "span", 24);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.optionsSelected)("ngForTrackBy", ctx_r2.trackByOption);
} }
function NgxSelectComponent_input_5_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 27, 28);
    ɵngcc0.ɵɵlistener("keyup", function NgxSelectComponent_input_5_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r26); const _r24 = ɵngcc0.ɵɵreference(1); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.inputKeyUp(_r24.value, $event); })("click", function NgxSelectComponent_input_5_Template_input_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r26); const _r24 = ɵngcc0.ɵɵreference(1); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.inputClick(_r24.value); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r3.setFormControlSize())("tabindex", ctx_r3.multiple === false ? 0 - 1 : 0)("disabled", ctx_r3.disabled)("placeholder", ctx_r3.optionsSelected.length ? "" : ctx_r3.placeholder)("autocomplete", ctx_r3.autocomplete);
} }
function NgxSelectComponent_ul_6_li_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 37);
} }
function NgxSelectComponent_ul_6_li_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 38);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r31 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(opt_r31.label);
} }
const _c6 = function (a0, a1) { return { "ngx-select__item_active active": a0, "ngx-select__item_disabled disabled": a1 }; };
const _c7 = function (a0, a1, a2, a3) { return { $implicit: a0, text: a1, index: a2, subIndex: a3 }; };
function NgxSelectComponent_ul_6_li_2_a_3_Template(rf, ctx) { if (rf & 1) {
    const _r41 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "a", 39, 40);
    ɵngcc0.ɵɵlistener("mouseenter", function NgxSelectComponent_ul_6_li_2_a_3_Template_a_mouseenter_0_listener() { ɵngcc0.ɵɵrestoreView(_r41); const option_r37 = ctx.$implicit; const ctx_r40 = ɵngcc0.ɵɵnextContext(3); return ctx_r40.onMouseEnter({ activeOption: option_r37, filteredOptionList: ctx_r40.optionsFiltered, index: ctx_r40.optionsFiltered.indexOf(option_r37) }); })("click", function NgxSelectComponent_ul_6_li_2_a_3_Template_a_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r41); const option_r37 = ctx.$implicit; const ctx_r42 = ɵngcc0.ɵɵnextContext(3); return ctx_r42.optionSelect(option_r37, $event); });
    ɵngcc0.ɵɵelementContainer(2, 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r37 = ctx.$implicit;
    const idxOption_r38 = ctx.index;
    const idxGroup_r32 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r35 = ɵngcc0.ɵɵnextContext(2);
    const _r5 = ɵngcc0.ɵɵreference(8);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(3, _c6, option_r37.active, option_r37.disabled));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r35.templateOption || _r5)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction4(6, _c7, option_r37, option_r37.highlightedText, idxGroup_r32, idxOption_r38));
} }
const _c8 = function (a0) { return [a0]; };
function NgxSelectComponent_ul_6_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 33);
    ɵngcc0.ɵɵtemplate(1, NgxSelectComponent_ul_6_li_2_div_1_Template, 1, 0, "div", 34);
    ɵngcc0.ɵɵtemplate(2, NgxSelectComponent_ul_6_li_2_div_2_Template, 2, 1, "div", 35);
    ɵngcc0.ɵɵtemplate(3, NgxSelectComponent_ul_6_li_2_a_3_Template, 3, 11, "a", 36);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const opt_r31 = ctx.$implicit;
    const idxGroup_r32 = ctx.index;
    const ctx_r29 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", opt_r31.type === "optgroup" && idxGroup_r32 > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", opt_r31.type === "optgroup");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", opt_r31.optionsFiltered || ɵngcc0.ɵɵpureFunction1(4, _c8, opt_r31))("ngForTrackBy", ctx_r29.trackByOption);
} }
const _c9 = function (a0) { return { $implicit: a0 }; };
function NgxSelectComponent_ul_6_li_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 41);
    ɵngcc0.ɵɵelementContainer(1, 20);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r30 = ɵngcc0.ɵɵnextContext(2);
    const _r7 = ɵngcc0.ɵɵreference(10);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r30.templateOptionNotFound || _r7)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c9, ctx_r30.inputText));
} }
function NgxSelectComponent_ul_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "ul", 29, 30);
    ɵngcc0.ɵɵtemplate(2, NgxSelectComponent_ul_6_li_2_Template, 4, 6, "li", 31);
    ɵngcc0.ɵɵtemplate(3, NgxSelectComponent_ul_6_li_3_Template, 2, 4, "li", 32);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("show", ctx_r4.showChoiceMenu());
    ɵngcc0.ɵɵproperty("ngClass", ctx_r4.dropDownMenuOtherClasses);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.optionsFiltered)("ngForTrackBy", ctx_r4.trackByOption);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.optionsFiltered.length);
} }
function NgxSelectComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 18);
} if (rf & 2) {
    const text_r44 = ctx.text;
    ɵngcc0.ɵɵproperty("innerHtml", text_r44, ɵngcc0.ɵɵsanitizeHtml);
} }
function NgxSelectComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r8.noResultsFound, " ");
} }
const _c10 = function (a0, a1) { return { "ngx-select_multiple form-control": a0, "open show": a1 }; };
const _c11 = function (a0) { return { "ngx-select__disabled": a0 }; };
const escapeString = escapeStringNs;
class NgxSelectOption {
    constructor(value, text, disabled, data, _parent = null) {
        this.value = value;
        this.text = text;
        this.disabled = disabled;
        this.data = data;
        this._parent = _parent;
        this.type = 'option';
        this.cacheRenderedText = null;
    }
    get parent() {
        return this._parent;
    }
    renderText(sanitizer, highlightText) {
        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {
            this.cacheHighlightText = highlightText;
            if (this.cacheHighlightText) {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'));
            }
            else {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);
            }
        }
        return this.cacheRenderedText;
    }
}
class NgxSelectOptGroup {
    constructor(label, options = []) {
        this.label = label;
        this.options = options;
        this.type = 'optgroup';
        this.filter(() => true);
    }
    filter(callbackFn) {
        this.optionsFiltered = this.options.filter((option) => callbackFn(option));
    }
}

let NgxSelectOptionDirective = class NgxSelectOptionDirective {
    constructor(template) {
        this.template = template;
    }
};
NgxSelectOptionDirective.ɵfac = function NgxSelectOptionDirective_Factory(t) { return new (t || NgxSelectOptionDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
NgxSelectOptionDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxSelectOptionDirective, selectors: [["", "ngx-select-option", ""]] });
NgxSelectOptionDirective.ctorParameters = () => [
    { type: TemplateRef }
];
let NgxSelectOptionSelectedDirective = class NgxSelectOptionSelectedDirective {
    constructor(template) {
        this.template = template;
    }
};
NgxSelectOptionSelectedDirective.ɵfac = function NgxSelectOptionSelectedDirective_Factory(t) { return new (t || NgxSelectOptionSelectedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
NgxSelectOptionSelectedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxSelectOptionSelectedDirective, selectors: [["", "ngx-select-option-selected", ""]] });
NgxSelectOptionSelectedDirective.ctorParameters = () => [
    { type: TemplateRef }
];
let NgxSelectOptionNotFoundDirective = class NgxSelectOptionNotFoundDirective {
    constructor(template) {
        this.template = template;
    }
};
NgxSelectOptionNotFoundDirective.ɵfac = function NgxSelectOptionNotFoundDirective_Factory(t) { return new (t || NgxSelectOptionNotFoundDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
NgxSelectOptionNotFoundDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxSelectOptionNotFoundDirective, selectors: [["", "ngx-select-option-not-found", ""]] });
NgxSelectOptionNotFoundDirective.ctorParameters = () => [
    { type: TemplateRef }
];

var NgxSelectComponent_1;
const _ = lodashNs;
const escapeString$1 = escapeStringNs;
const NGX_SELECT_OPTIONS = new InjectionToken('NGX_SELECT_OPTIONS');
var ENavigation;
(function (ENavigation) {
    ENavigation[ENavigation["first"] = 0] = "first";
    ENavigation[ENavigation["previous"] = 1] = "previous";
    ENavigation[ENavigation["next"] = 2] = "next";
    ENavigation[ENavigation["last"] = 3] = "last";
    ENavigation[ENavigation["firstSelected"] = 4] = "firstSelected";
    ENavigation[ENavigation["firstIfOptionActiveInvisible"] = 5] = "firstIfOptionActiveInvisible";
})(ENavigation || (ENavigation = {}));
function propertyExists(obj, propertyName) {
    return propertyName in obj;
}
let NgxSelectComponent = NgxSelectComponent_1 = class NgxSelectComponent {
    constructor(iterableDiffers, sanitizer, cd, defaultOptions) {
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.optionValueField = 'id';
        this.optionTextField = 'text';
        this.optGroupLabelField = 'label';
        this.optGroupOptionsField = 'options';
        this.multiple = false;
        this.allowClear = false;
        this.placeholder = '';
        this.noAutoComplete = false;
        this.disabled = false;
        this.defaultValue = [];
        this.autoSelectSingleOption = false;
        this.autoClearSearch = false;
        this.noResultsFound = 'No results found';
        this.size = 'default';
        this.autoActiveOnMouseEnter = true;
        this.showOptionNotFoundForEmptyItems = false;
        this.isFocused = false;
        this.keepSelectMenuOpened = false;
        this.autocomplete = 'off';
        this.dropDownMenuOtherClasses = '';
        this.keyCodeToRemoveSelected = 'Delete';
        this.keyCodeToOptionsOpen = ['Enter', 'NumpadEnter'];
        this.keyCodeToOptionsClose = 'Escape';
        this.keyCodeToOptionsSelect = ['Enter', 'NumpadEnter'];
        this.keyCodeToNavigateFirst = 'ArrowLeft';
        this.keyCodeToNavigatePrevious = 'ArrowUp';
        this.keyCodeToNavigateNext = 'ArrowDown';
        this.keyCodeToNavigateLast = 'ArrowRight';
        this.typed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.open = new EventEmitter();
        this.close = new EventEmitter();
        this.select = new EventEmitter();
        this.remove = new EventEmitter();
        this.navigated = new EventEmitter();
        this.selectionChanges = new EventEmitter();
        this.optionsOpened = false;
        this.actualValue = [];
        this.subjOptions = new BehaviorSubject([]);
        this.subjSearchText = new BehaviorSubject('');
        this.subjOptionsSelected = new BehaviorSubject([]);
        this.subjExternalValue = new BehaviorSubject([]);
        this.subjDefaultValue = new BehaviorSubject([]);
        this.subjRegisterOnChange = new Subject();
        this._focusToInput = false;
        //////////// interface ControlValueAccessor ////////////
        this.onChange = (v) => v;
        this.onTouched = () => null;
        Object.assign(this, defaultOptions);
        // DIFFERS
        this.itemsDiffer = iterableDiffers.find([]).create(null);
        this.defaultValueDiffer = iterableDiffers.find([]).create(null);
        // OBSERVERS
        this.typed.subscribe((text) => this.subjSearchText.next(text));
        this.subjOptionsSelected.subscribe((options) => this.selectionChanges.emit(options));
        let cacheExternalValue;
        // Get actual value
        const subjActualValue = combineLatest([
            merge(this.subjExternalValue.pipe(map((v) => cacheExternalValue = v === null ? [] : [].concat(v))), this.subjOptionsSelected.pipe(map((options) => options.map((o) => o.value)))),
            this.subjDefaultValue
        ]).pipe(map(([eVal, dVal]) => {
            const newVal = _.isEqual(eVal, dVal) ? [] : eVal;
            return newVal.length ? newVal : dVal;
        }), distinctUntilChanged((x, y) => _.isEqual(x, y)), share());
        // Export actual value
        combineLatest([subjActualValue, this.subjRegisterOnChange])
            .pipe(map(([actualValue]) => actualValue))
            .subscribe((actualValue) => {
            this.actualValue = actualValue;
            if (!_.isEqual(actualValue, cacheExternalValue)) {
                cacheExternalValue = actualValue;
                if (this.multiple) {
                    this.onChange(actualValue);
                }
                else {
                    this.onChange(actualValue.length ? actualValue[0] : null);
                }
            }
        });
        // Correct selected options when the options changed
        combineLatest([
            this.subjOptions.pipe(flatMap((options) => from(options).pipe(flatMap((option) => option instanceof NgxSelectOption
                ? of(option)
                : (option instanceof NgxSelectOptGroup ? from(option.options) : EMPTY)), toArray()))),
            subjActualValue
        ]).pipe(map(([optionsFlat, actualValue]) => {
            const optionsSelected = [];
            actualValue.forEach((value) => {
                const selectedOption = optionsFlat.find((option) => option.value === value);
                if (selectedOption) {
                    optionsSelected.push(selectedOption);
                }
            });
            if (this.keepSelectedItems) {
                const optionValues = optionsSelected.map((option) => option.value);
                const keptSelectedOptions = this.subjOptionsSelected.value
                    .filter((selOption) => optionValues.indexOf(selOption.value) === -1);
                optionsSelected.push(...keptSelectedOptions);
            }
            if (!_.isEqual(optionsSelected, this.subjOptionsSelected.value)) {
                this.subjOptionsSelected.next(optionsSelected);
                this.cd.markForCheck();
            }
        })).subscribe();
        // Ensure working filter by a search text
        combineLatest([this.subjOptions, this.subjOptionsSelected, this.subjSearchText]).pipe(map(([options, selectedOptions, search]) => {
            this.optionsFiltered = this.filterOptions(search, options, selectedOptions).map(option => {
                if (option instanceof NgxSelectOption) {
                    option.highlightedText = this.highlightOption(option);
                }
                else if (option instanceof NgxSelectOptGroup) {
                    option.options.map(subOption => {
                        subOption.highlightedText = this.highlightOption(subOption);
                        return subOption;
                    });
                }
                return option;
            });
            this.cacheOptionsFilteredFlat = null;
            this.navigateOption(ENavigation.firstIfOptionActiveInvisible);
            this.cd.markForCheck();
            return selectedOptions;
        }), flatMap((selectedOptions) => this.optionsFilteredFlat().pipe(filter((flatOptions) => this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length)))).subscribe((flatOptions) => {
            this.subjOptionsSelected.next(flatOptions);
            this.cd.markForCheck();
        });
    }
    /** @internal */
    get inputText() {
        if (this.inputElRef && this.inputElRef.nativeElement) {
            return this.inputElRef.nativeElement.value;
        }
        return '';
    }
    setFormControlSize(otherClassNames = {}, useFormControl = true) {
        const formControlExtraClasses = useFormControl ? {
            'form-control-sm input-sm': this.size === 'small',
            'form-control-lg input-lg': this.size === 'large'
        } : {};
        return Object.assign(formControlExtraClasses, otherClassNames);
    }
    setBtnSize() {
        return { 'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large' };
    }
    get optionsSelected() {
        return this.subjOptionsSelected.value;
    }
    mainClicked(event) {
        event.clickedSelectComponent = this;
        if (!this.isFocused) {
            this.isFocused = true;
            this.focus.emit();
        }
    }
    documentClick(event) {
        if (event.clickedSelectComponent !== this) {
            if (this.optionsOpened) {
                this.optionsClose();
                this.cd.detectChanges(); // fix error because of delay between different events
            }
            if (this.isFocused) {
                this.isFocused = false;
                this.blur.emit();
            }
        }
    }
    optionsFilteredFlat() {
        if (this.cacheOptionsFilteredFlat) {
            return of(this.cacheOptionsFilteredFlat);
        }
        return from(this.optionsFiltered).pipe(flatMap((option) => option instanceof NgxSelectOption ? of(option) :
            (option instanceof NgxSelectOptGroup ? from(option.optionsFiltered) : EMPTY)), filter((optionsFilteredFlat) => !optionsFilteredFlat.disabled), toArray(), tap((optionsFilteredFlat) => this.cacheOptionsFilteredFlat = optionsFilteredFlat));
    }
    navigateOption(navigation) {
        this.optionsFilteredFlat().pipe(map((options) => {
            const navigated = { index: -1, activeOption: null, filteredOptionList: options };
            let newActiveIdx;
            switch (navigation) {
                case ENavigation.first:
                    navigated.index = 0;
                    break;
                case ENavigation.previous:
                    newActiveIdx = options.indexOf(this.optionActive) - 1;
                    navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;
                    break;
                case ENavigation.next:
                    newActiveIdx = options.indexOf(this.optionActive) + 1;
                    navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;
                    break;
                case ENavigation.last:
                    navigated.index = options.length - 1;
                    break;
                case ENavigation.firstSelected:
                    if (this.subjOptionsSelected.value.length) {
                        navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);
                    }
                    break;
                case ENavigation.firstIfOptionActiveInvisible:
                    let idxOfOptionActive = -1;
                    if (this.optionActive) {
                        idxOfOptionActive = options.indexOf(options.find(x => x.value === this.optionActive.value));
                    }
                    navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;
                    break;
            }
            navigated.activeOption = options[navigated.index];
            return navigated;
        })).subscribe((newNavigated) => this.optionActivate(newNavigated));
    }
    ngDoCheck() {
        if (this.itemsDiffer.diff(this.items)) {
            this.subjOptions.next(this.buildOptions(this.items));
        }
        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];
        if (this.defaultValueDiffer.diff(defVal)) {
            this.subjDefaultValue.next(defVal);
        }
    }
    ngAfterContentChecked() {
        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&
            this.inputElRef.nativeElement !== document.activeElement) {
            this._focusToInput = false;
            this.inputElRef.nativeElement.focus();
        }
        if (this.choiceMenuElRef) {
            const ulElement = this.choiceMenuElRef.nativeElement;
            const element = ulElement.querySelector('a.ngx-select__item_active.active');
            if (element && element.offsetHeight > 0) {
                this.ensureVisibleElement(element);
            }
        }
    }
    ngOnDestroy() {
        this.cd.detach();
    }
    canClearNotMultiple() {
        return this.allowClear && !!this.subjOptionsSelected.value.length &&
            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);
    }
    focusToInput() {
        this._focusToInput = true;
    }
    inputKeyDown(event) {
        const keysForOpenedState = [].concat(this.keyCodeToOptionsSelect, this.keyCodeToNavigateFirst, this.keyCodeToNavigatePrevious, this.keyCodeToNavigateNext, this.keyCodeToNavigateLast);
        const keysForClosedState = [].concat(this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected);
        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {
            event.preventDefault();
            event.stopPropagation();
            switch (event.code) {
                case ([].concat(this.keyCodeToOptionsSelect).indexOf(event.code) + 1) && event.code:
                    this.optionSelect(this.optionActive);
                    this.navigateOption(ENavigation.next);
                    break;
                case this.keyCodeToNavigateFirst:
                    this.navigateOption(ENavigation.first);
                    break;
                case this.keyCodeToNavigatePrevious:
                    this.navigateOption(ENavigation.previous);
                    break;
                case this.keyCodeToNavigateLast:
                    this.navigateOption(ENavigation.last);
                    break;
                case this.keyCodeToNavigateNext:
                    this.navigateOption(ENavigation.next);
                    break;
            }
        }
        else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {
            event.preventDefault();
            event.stopPropagation();
            switch (event.code) {
                case ([].concat(this.keyCodeToOptionsOpen).indexOf(event.code) + 1) && event.code:
                    this.optionsOpen();
                    break;
                case this.keyCodeToRemoveSelected:
                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);
                    break;
            }
        }
    }
    trackByOption(index, option) {
        return option instanceof NgxSelectOption ? option.value :
            (option instanceof NgxSelectOptGroup ? option.label : option);
    }
    checkInputVisibility() {
        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);
    }
    /** @internal */
    inputKeyUp(value = '', event) {
        if (event.code === this.keyCodeToOptionsClose) {
            this.optionsClose( /*true*/);
        }
        else if (this.optionsOpened && (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowDown'].indexOf(event.code) === -1) /*ignore arrows*/) {
            this.typed.emit(value);
        }
        else if (!this.optionsOpened && value) {
            this.optionsOpen(value);
        }
    }
    /** @internal */
    inputClick(value = '') {
        if (!this.optionsOpened) {
            this.optionsOpen(value);
        }
    }
    /** @internal */
    sanitize(html) {
        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;
    }
    /** @internal */
    highlightOption(option) {
        if (this.inputElRef) {
            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);
        }
        return option.renderText(this.sanitizer, '');
    }
    /** @internal */
    optionSelect(option, event = null) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (option && !option.disabled) {
            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));
            this.select.emit(option.value);
            if (!this.keepSelectMenuOpened) {
                this.optionsClose( /*true*/);
            }
            this.onTouched();
        }
    }
    /** @internal */
    optionRemove(option, event) {
        if (!this.disabled && option) {
            event.stopPropagation();
            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));
            this.remove.emit(option.value);
        }
    }
    /** @internal */
    optionActivate(navigated) {
        if ((this.optionActive !== navigated.activeOption) &&
            (!navigated.activeOption || !navigated.activeOption.disabled)) {
            if (this.optionActive) {
                this.optionActive.active = false;
            }
            this.optionActive = navigated.activeOption;
            if (this.optionActive) {
                this.optionActive.active = true;
            }
            this.navigated.emit(navigated);
            this.cd.detectChanges();
        }
    }
    /** @internal */
    onMouseEnter(navigated) {
        if (this.autoActiveOnMouseEnter) {
            this.optionActivate(navigated);
        }
    }
    filterOptions(search, options, selectedOptions) {
        const regExp = new RegExp(escapeString$1(search), 'i'), filterOption = (option) => {
            if (this.searchCallback) {
                return this.searchCallback(search, option);
            }
            return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);
        };
        return options.filter((option) => {
            if (option instanceof NgxSelectOption) {
                return filterOption(option);
            }
            else if (option instanceof NgxSelectOptGroup) {
                const subOp = option;
                subOp.filter((subOption) => filterOption(subOption));
                return subOp.optionsFiltered.length;
            }
        });
    }
    ensureVisibleElement(element) {
        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {
            this.cacheElementOffsetTop = element.offsetTop;
            const container = this.choiceMenuElRef.nativeElement;
            if (this.cacheElementOffsetTop < container.scrollTop) {
                container.scrollTop = this.cacheElementOffsetTop;
            }
            else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {
                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;
            }
        }
    }
    showChoiceMenu() {
        return this.optionsOpened && (!!this.subjOptions.value.length || this.showOptionNotFoundForEmptyItems);
    }
    optionsOpen(search = '') {
        if (!this.disabled) {
            this.optionsOpened = true;
            this.subjSearchText.next(search);
            if (!this.multiple && this.subjOptionsSelected.value.length) {
                this.navigateOption(ENavigation.firstSelected);
            }
            else {
                this.navigateOption(ENavigation.first);
            }
            this.focusToInput();
            this.open.emit();
            this.cd.markForCheck();
        }
    }
    optionsClose( /*focusToHost: boolean = false*/) {
        this.optionsOpened = false;
        // if (focusToHost) {
        //     const x = window.scrollX, y = window.scrollY;
        //     this.mainElRef.nativeElement.focus();
        //     window.scrollTo(x, y);
        // }
        this.close.emit();
        if (this.autoClearSearch && this.multiple && this.inputElRef) {
            this.inputElRef.nativeElement.value = null;
        }
    }
    buildOptions(data) {
        const result = [];
        if (Array.isArray(data)) {
            data.forEach((item) => {
                const isOptGroup = typeof item === 'object' && item !== null &&
                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&
                    Array.isArray(item[this.optGroupOptionsField]);
                if (isOptGroup) {
                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);
                    item[this.optGroupOptionsField].forEach((subOption) => {
                        const opt = this.buildOption(subOption, optGroup);
                        if (opt) {
                            optGroup.options.push(opt);
                        }
                    });
                    result.push(optGroup);
                }
                else {
                    const option = this.buildOption(item, null);
                    if (option) {
                        result.push(option);
                    }
                }
            });
        }
        return result;
    }
    buildOption(data, parent) {
        let value, text, disabled;
        if (typeof data === 'string' || typeof data === 'number') {
            value = text = data;
            disabled = false;
        }
        else if (typeof data === 'object' && data !== null &&
            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {
            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];
            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];
            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;
        }
        else {
            return null;
        }
        return new NgxSelectOption(value, text, disabled, data, parent);
    }
    writeValue(obj) {
        this.subjExternalValue.next(obj);
    }
    registerOnChange(fn) {
        this.onChange = fn;
        this.subjRegisterOnChange.next();
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
};
NgxSelectComponent.ɵfac = function NgxSelectComponent_Factory(t) { return new (t || NgxSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NGX_SELECT_OPTIONS, 8)); };
NgxSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxSelectComponent, selectors: [["ngx-select"]], contentQueries: function NgxSelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, NgxSelectOptionDirective, true, TemplateRef);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, NgxSelectOptionSelectedDirective, true, TemplateRef);
        ɵngcc0.ɵɵstaticContentQuery(dirIndex, NgxSelectOptionNotFoundDirective, true, TemplateRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateOption = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateSelectedOption = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateOptionNotFound = _t.first);
    } }, viewQuery: function NgxSelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵviewQuery(_c1, true);
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.mainElRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.choiceMenuElRef = _t.first);
    } }, hostBindings: function NgxSelectComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusin", function NgxSelectComponent_focusin_HostBindingHandler($event) { return ctx.documentClick($event); }, false, ɵngcc0.ɵɵresolveDocument)("click", function NgxSelectComponent_click_HostBindingHandler($event) { return ctx.documentClick($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } }, inputs: { optionValueField: "optionValueField", optionTextField: "optionTextField", optGroupLabelField: "optGroupLabelField", optGroupOptionsField: "optGroupOptionsField", multiple: "multiple", allowClear: "allowClear", placeholder: "placeholder", noAutoComplete: "noAutoComplete", disabled: "disabled", defaultValue: "defaultValue", autoSelectSingleOption: "autoSelectSingleOption", autoClearSearch: "autoClearSearch", noResultsFound: "noResultsFound", size: "size", autoActiveOnMouseEnter: "autoActiveOnMouseEnter", showOptionNotFoundForEmptyItems: "showOptionNotFoundForEmptyItems", isFocused: "isFocused", keepSelectMenuOpened: "keepSelectMenuOpened", autocomplete: "autocomplete", dropDownMenuOtherClasses: "dropDownMenuOtherClasses", items: "items", keepSelectedItems: "keepSelectedItems", searchCallback: "searchCallback" }, outputs: { typed: "typed", focus: "focus", blur: "blur", open: "open", close: "close", select: "select", remove: "remove", navigated: "navigated", selectionChanges: "selectionChanges" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => NgxSelectComponent_1),
                multi: true
            }
        ])], decls: 11, vars: 12, consts: [[1, "ngx-select", "dropdown", 3, "tabindex", "ngClass", "click", "focusin", "focus", "keydown"], ["main", ""], [3, "ngClass"], ["class", "ngx-select__selected", 4, "ngIf"], ["class", "ngx-select__selected", 3, "click", 4, "ngIf"], ["type", "text", "class", "ngx-select__search form-control", "autocorrect", "off", "autocapitalize", "off", "spellcheck", "false", "role", "combobox", 3, "ngClass", "tabindex", "disabled", "placeholder", "autocomplete", "keyup", "click", 4, "ngIf"], ["role", "menu", "class", "ngx-select__choices dropdown-menu", 3, "ngClass", "show", 4, "ngIf"], ["defaultTemplateOption", ""], ["defaultTemplateOptionNotFound", ""], [1, "ngx-select__selected"], [1, "ngx-select__toggle", "btn", "form-control", 3, "ngClass", "click"], ["class", "ngx-select__placeholder text-muted", 4, "ngIf"], ["class", "ngx-select__selected-single pull-left float-left", 3, "ngClass", 4, "ngIf"], [1, "ngx-select__toggle-buttons"], ["class", "ngx-select__clear btn btn-sm btn-link", 3, "ngClass", "click", 4, "ngIf"], [1, "dropdown-toggle"], [1, "ngx-select__toggle-caret", "caret"], [1, "ngx-select__placeholder", "text-muted"], [3, "innerHtml"], [1, "ngx-select__selected-single", "pull-left", "float-left", 3, "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ngx-select__clear", "btn", "btn-sm", "btn-link", 3, "ngClass", "click"], [1, "ngx-select__clear-icon"], [1, "ngx-select__selected", 3, "click"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "-1", 1, "ngx-select__selected-plural", "btn", "btn-default", "btn-secondary", "btn-sm", "btn-xs", 3, "ngClass", "click"], [1, "ngx-select__clear", "btn", "btn-sm", "btn-link", "pull-right", "float-right", 3, "ngClass", "click"], ["type", "text", "autocorrect", "off", "autocapitalize", "off", "spellcheck", "false", "role", "combobox", 1, "ngx-select__search", "form-control", 3, "ngClass", "tabindex", "disabled", "placeholder", "autocomplete", "keyup", "click"], ["input", ""], ["role", "menu", 1, "ngx-select__choices", "dropdown-menu", 3, "ngClass"], ["choiceMenu", ""], ["class", "ngx-select__item-group", "role", "menuitem", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "ngx-select__item ngx-select__item_no-found dropdown-header", 4, "ngIf"], ["role", "menuitem", 1, "ngx-select__item-group"], ["class", "divider dropdown-divider", 4, "ngIf"], ["class", "dropdown-header", 4, "ngIf"], ["href", "#", "class", "ngx-select__item dropdown-item", 3, "ngClass", "mouseenter", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "divider", "dropdown-divider"], [1, "dropdown-header"], ["href", "#", 1, "ngx-select__item", "dropdown-item", 3, "ngClass", "mouseenter", "click"], ["choiceItem", ""], [1, "ngx-select__item", "ngx-select__item_no-found", "dropdown-header"]], template: function NgxSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("click", function NgxSelectComponent_Template_div_click_0_listener($event) { return ctx.mainClicked($event); })("focusin", function NgxSelectComponent_Template_div_focusin_0_listener($event) { return ctx.mainClicked($event); })("focus", function NgxSelectComponent_Template_div_focus_0_listener() { return ctx.focusToInput(); })("keydown", function NgxSelectComponent_Template_div_keydown_0_listener($event) { return ctx.inputKeyDown($event); });
        ɵngcc0.ɵɵelement(2, "div", 2);
        ɵngcc0.ɵɵtemplate(3, NgxSelectComponent_div_3_Template, 8, 4, "div", 3);
        ɵngcc0.ɵɵtemplate(4, NgxSelectComponent_div_4_Template, 2, 2, "div", 4);
        ɵngcc0.ɵɵtemplate(5, NgxSelectComponent_input_5_Template, 2, 5, "input", 5);
        ɵngcc0.ɵɵtemplate(6, NgxSelectComponent_ul_6_Template, 4, 6, "ul", 6);
        ɵngcc0.ɵɵtemplate(7, NgxSelectComponent_ng_template_7_Template, 1, 1, "ng-template", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(9, NgxSelectComponent_ng_template_9_Template, 1, 1, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("tabindex", ctx.disabled ? 0 - 1 : 0)("ngClass", ctx.setFormControlSize(ɵngcc0.ɵɵpureFunction2(7, _c10, ctx.multiple === true, ctx.optionsOpened && ctx.optionsFiltered.length), ctx.multiple === true));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c11, ctx.disabled));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.multiple === false && (!ctx.optionsOpened || ctx.noAutoComplete));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.multiple === true);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.checkInputVisibility());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isFocused);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc2.NgForOf], styles: [".ngx-select_multiple[_ngcontent-%COMP%]{height:auto;padding:3px 3px 0}.ngx-select_multiple[_ngcontent-%COMP%]   .ngx-select__search[_ngcontent-%COMP%]{background-color:transparent!important;border:none;outline:0;box-shadow:none;height:1.6666em;padding:0;margin-bottom:3px}.ngx-select__disabled[_ngcontent-%COMP%]{background-color:#eceeef;border-radius:4px;position:absolute;width:100%;height:100%;z-index:5;opacity:.6;top:0;left:0;cursor:not-allowed}.ngx-select__toggle[_ngcontent-%COMP%]{outline:0;position:relative;text-align:left!important;color:#333;background-color:#fff;border-color:#ccc;display:inline-flex;align-items:stretch;justify-content:space-between}.ngx-select__toggle[_ngcontent-%COMP%]:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.ngx-select__toggle-buttons[_ngcontent-%COMP%]{flex-shrink:0;display:flex;align-items:center}.ngx-select__toggle-caret[_ngcontent-%COMP%]{position:absolute;height:10px;top:50%;right:10px;margin-top:-2px}.ngx-select__placeholder[_ngcontent-%COMP%]{float:left;max-width:100%;text-overflow:ellipsis;overflow:hidden}.ngx-select__clear[_ngcontent-%COMP%]{margin-right:10px;padding:0;border:none}.ngx-select_multiple[_ngcontent-%COMP%]   .ngx-select__clear[_ngcontent-%COMP%]{line-height:initial;margin-left:5px;margin-right:0;color:#000;opacity:.5}.ngx-select__clear-icon[_ngcontent-%COMP%]{display:inline-block;font-size:inherit;cursor:pointer;position:relative;width:1em;height:.75em;padding:0}.ngx-select__clear-icon[_ngcontent-%COMP%]:after, .ngx-select__clear-icon[_ngcontent-%COMP%]:before{content:\"\";position:absolute;border-top:3px solid;width:100%;top:50%;left:0;margin-top:-1px}.ngx-select__clear-icon[_ngcontent-%COMP%]:before{transform:rotate(45deg)}.ngx-select__clear-icon[_ngcontent-%COMP%]:after{transform:rotate(-45deg)}.ngx-select__choices[_ngcontent-%COMP%]{width:100%;height:auto;max-height:200px;overflow-x:hidden;margin-top:0;position:absolute}.ngx-select_multiple[_ngcontent-%COMP%]   .ngx-select__choices[_ngcontent-%COMP%]{margin-top:1px}.ngx-select__item[_ngcontent-%COMP%]{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;white-space:nowrap;cursor:pointer;text-decoration:none}.ngx-select__item_disabled[_ngcontent-%COMP%], .ngx-select__item_no-found[_ngcontent-%COMP%]{cursor:default}.ngx-select__item_active[_ngcontent-%COMP%]{color:#fff;outline:0;background-color:#428bca}.ngx-select__selected-plural[_ngcontent-%COMP%], .ngx-select__selected-single[_ngcontent-%COMP%]{display:inline-flex;align-items:center;overflow:hidden}.ngx-select__selected-plural[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .ngx-select__selected-single[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{overflow:hidden;text-overflow:ellipsis}.ngx-select__selected-plural[_ngcontent-%COMP%]{outline:0;margin:0 3px 3px 0}.input-group[_ngcontent-%COMP%] > .dropdown[_ngcontent-%COMP%]{position:static}"], changeDetection: 0 });
NgxSelectComponent.ctorParameters = () => [
    { type: IterableDiffers },
    { type: DomSanitizer },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [NGX_SELECT_OPTIONS,] }, { type: Optional }] }
];
__decorate([
    Input()
], NgxSelectComponent.prototype, "items", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "optionValueField", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "optionTextField", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "optGroupLabelField", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "optGroupOptionsField", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "multiple", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "allowClear", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "placeholder", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "noAutoComplete", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "disabled", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "defaultValue", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "autoSelectSingleOption", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "autoClearSearch", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "noResultsFound", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "keepSelectedItems", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "size", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "searchCallback", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "autoActiveOnMouseEnter", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "showOptionNotFoundForEmptyItems", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "isFocused", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "keepSelectMenuOpened", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "autocomplete", void 0);
__decorate([
    Input()
], NgxSelectComponent.prototype, "dropDownMenuOtherClasses", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "typed", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "focus", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "blur", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "open", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "close", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "select", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "remove", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "navigated", void 0);
__decorate([
    Output()
], NgxSelectComponent.prototype, "selectionChanges", void 0);
__decorate([
    ViewChild('main', { static: true })
], NgxSelectComponent.prototype, "mainElRef", void 0);
__decorate([
    ViewChild('input')
], NgxSelectComponent.prototype, "inputElRef", void 0);
__decorate([
    ViewChild('choiceMenu')
], NgxSelectComponent.prototype, "choiceMenuElRef", void 0);
__decorate([
    ContentChild(NgxSelectOptionDirective, { read: TemplateRef, static: true })
], NgxSelectComponent.prototype, "templateOption", void 0);
__decorate([
    ContentChild(NgxSelectOptionSelectedDirective, { read: TemplateRef, static: true })
], NgxSelectComponent.prototype, "templateSelectedOption", void 0);
__decorate([
    ContentChild(NgxSelectOptionNotFoundDirective, { read: TemplateRef, static: true })
], NgxSelectComponent.prototype, "templateOptionNotFound", void 0);
__decorate([
    HostListener('document:focusin', ['$event']),
    HostListener('document:click', ['$event'])
], NgxSelectComponent.prototype, "documentClick", null);
NgxSelectComponent = NgxSelectComponent_1 = __decorate([ __param(3, Inject(NGX_SELECT_OPTIONS)), __param(3, Optional())
], NgxSelectComponent);

var NgxSelectModule_1;
let NgxSelectModule = NgxSelectModule_1 = class NgxSelectModule {
    static forRoot(options) {
        return {
            ngModule: NgxSelectModule_1,
            providers: [{ provide: NGX_SELECT_OPTIONS, useValue: options }]
        };
    }
};
NgxSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxSelectModule });
NgxSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxSelectModule_Factory(t) { return new (t || NgxSelectModule)(); }, imports: [[
            CommonModule
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxSelectOptionDirective, [{
        type: Directive,
        args: [{ selector: '[ngx-select-option]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxSelectOptionSelectedDirective, [{
        type: Directive,
        args: [{ selector: '[ngx-select-option-selected]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxSelectOptionNotFoundDirective, [{
        type: Directive,
        args: [{ selector: '[ngx-select-option-not-found]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxSelectComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-select',
                template: "<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\n     [ngClass]=\"setFormControlSize({\n        'ngx-select_multiple form-control': multiple === true,\n        'open show': optionsOpened && optionsFiltered.length\n     }, multiple === true)\"\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\">\n    <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\n\n    <!-- single selected item -->\n    <div class=\"ngx-select__selected\"\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n        <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\n             (click)=\"optionsOpen()\">\n\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\n                <span [innerHtml]=\"placeholder\"></span>\n            </span>\n            <span *ngIf=\"optionsSelected.length\"\n                  class=\"ngx-select__selected-single pull-left float-left\"\n                  [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                          text: sanitize(optionsSelected[0].text)}\">\n                </ng-container>\n            </span>\n            <span class=\"ngx-select__toggle-buttons\">\n                <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\n                   [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(optionsSelected[0], $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n                <i class=\"dropdown-toggle\"></i>\n                <i class=\"ngx-select__toggle-caret caret\"></i>\n            </span>\n        </div>\n    </div>\n\n    <!-- multiple selected items -->\n    <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\" (click)=\"inputClick(inputElRef && inputElRef['value'])\">\n        <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\n            <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\" (click)=\"$event.stopPropagation()\"\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-sm btn-xs\">\n\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                </ng-container>\n\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(option, $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n            </span>\n        </span>\n    </div>\n\n    <!-- live search an item from the list -->\n    <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\n           *ngIf=\"checkInputVisibility()\"\n           [tabindex]=\"multiple === false? -1: 0\"\n           (keyup)=\"inputKeyUp(input.value, $event)\"\n           [disabled]=\"disabled\"\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\n           (click)=\"inputClick(input.value)\"\n           [autocomplete]=\"autocomplete\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           role=\"combobox\">\n\n    <!-- options template -->\n    <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\n        [ngClass]=\"dropDownMenuOtherClasses\"\n        [class.show]=\"showChoiceMenu()\">\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n            <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n               [ngClass]=\"{\n                    'ngx-select__item_active active': option.active,\n                    'ngx-select__item_disabled disabled': option.disabled\n               }\"\n               (mouseenter)=\"onMouseEnter({\n                    activeOption: option,\n                    filteredOptionList: optionsFiltered,\n                    index: optionsFiltered.indexOf(option)\n               })\"\n               (click)=\"optionSelect(option, $event)\">\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: option.highlightedText,\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\n            </a>\n        </li>\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"\n                          [ngTemplateOutletContext]=\"{$implicit: inputText}\"></ng-container>\n        </li>\n    </ul>\n\n    <!--Default templates-->\n    <ng-template #defaultTemplateOption let-text=\"text\">\n        <span [innerHtml]=\"text\"></span>\n    </ng-template>\n\n    <ng-template #defaultTemplateOptionNotFound>\n        {{noResultsFound}}\n    </ng-template>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NgxSelectComponent_1),
                        multi: true
                    }
                ],
                styles: [".ngx-select_multiple{height:auto;padding:3px 3px 0}.ngx-select_multiple .ngx-select__search{background-color:transparent!important;border:none;outline:0;box-shadow:none;height:1.6666em;padding:0;margin-bottom:3px}.ngx-select__disabled{background-color:#eceeef;border-radius:4px;position:absolute;width:100%;height:100%;z-index:5;opacity:.6;top:0;left:0;cursor:not-allowed}.ngx-select__toggle{outline:0;position:relative;text-align:left!important;color:#333;background-color:#fff;border-color:#ccc;display:inline-flex;align-items:stretch;justify-content:space-between}.ngx-select__toggle:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.ngx-select__toggle-buttons{flex-shrink:0;display:flex;align-items:center}.ngx-select__toggle-caret{position:absolute;height:10px;top:50%;right:10px;margin-top:-2px}.ngx-select__placeholder{float:left;max-width:100%;text-overflow:ellipsis;overflow:hidden}.ngx-select__clear{margin-right:10px;padding:0;border:none}.ngx-select_multiple .ngx-select__clear{line-height:initial;margin-left:5px;margin-right:0;color:#000;opacity:.5}.ngx-select__clear-icon{display:inline-block;font-size:inherit;cursor:pointer;position:relative;width:1em;height:.75em;padding:0}.ngx-select__clear-icon:after,.ngx-select__clear-icon:before{content:\"\";position:absolute;border-top:3px solid;width:100%;top:50%;left:0;margin-top:-1px}.ngx-select__clear-icon:before{transform:rotate(45deg)}.ngx-select__clear-icon:after{transform:rotate(-45deg)}.ngx-select__choices{width:100%;height:auto;max-height:200px;overflow-x:hidden;margin-top:0;position:absolute}.ngx-select_multiple .ngx-select__choices{margin-top:1px}.ngx-select__item{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;white-space:nowrap;cursor:pointer;text-decoration:none}.ngx-select__item_disabled,.ngx-select__item_no-found{cursor:default}.ngx-select__item_active{color:#fff;outline:0;background-color:#428bca}.ngx-select__selected-plural,.ngx-select__selected-single{display:inline-flex;align-items:center;overflow:hidden}.ngx-select__selected-plural span,.ngx-select__selected-single span{overflow:hidden;text-overflow:ellipsis}.ngx-select__selected-plural{outline:0;margin:0 3px 3px 0}.input-group>.dropdown{position:static}"]
            }]
    }], function () { return [{ type: ɵngcc0.IterableDiffers }, { type: ɵngcc1.DomSanitizer }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [NGX_SELECT_OPTIONS]
            }, {
                type: Optional
            }] }]; }, { optionValueField: [{
            type: Input
        }], optionTextField: [{
            type: Input
        }], optGroupLabelField: [{
            type: Input
        }], optGroupOptionsField: [{
            type: Input
        }], multiple: [{
            type: Input
        }], allowClear: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], noAutoComplete: [{
            type: Input
        }], disabled: [{
            type: Input
        }], defaultValue: [{
            type: Input
        }], autoSelectSingleOption: [{
            type: Input
        }], autoClearSearch: [{
            type: Input
        }], noResultsFound: [{
            type: Input
        }], size: [{
            type: Input
        }], autoActiveOnMouseEnter: [{
            type: Input
        }], showOptionNotFoundForEmptyItems: [{
            type: Input
        }], isFocused: [{
            type: Input
        }], keepSelectMenuOpened: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], dropDownMenuOtherClasses: [{
            type: Input
        }], typed: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], select: [{
            type: Output
        }], remove: [{
            type: Output
        }], navigated: [{
            type: Output
        }], selectionChanges: [{
            type: Output
        }], documentClick: [{
            type: HostListener,
            args: ['document:focusin', ['$event']]
        }, {
            type: HostListener,
            args: ['document:click', ['$event']]
        }], items: [{
            type: Input
        }], keepSelectedItems: [{
            type: Input
        }], searchCallback: [{
            type: Input
        }], mainElRef: [{
            type: ViewChild,
            args: ['main', { static: true }]
        }], inputElRef: [{
            type: ViewChild,
            args: ['input']
        }], choiceMenuElRef: [{
            type: ViewChild,
            args: ['choiceMenu']
        }], templateOption: [{
            type: ContentChild,
            args: [NgxSelectOptionDirective, { read: TemplateRef, static: true }]
        }], templateSelectedOption: [{
            type: ContentChild,
            args: [NgxSelectOptionSelectedDirective, { read: TemplateRef, static: true }]
        }], templateOptionNotFound: [{
            type: ContentChild,
            args: [NgxSelectOptionNotFoundDirective, { read: TemplateRef, static: true }]
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxSelectModule, { declarations: function () { return [NgxSelectComponent,
        NgxSelectOptionDirective,
        NgxSelectOptionSelectedDirective,
        NgxSelectOptionNotFoundDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgxSelectComponent,
        NgxSelectOptionDirective,
        NgxSelectOptionSelectedDirective,
        NgxSelectOptionNotFoundDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxSelectModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [NgxSelectComponent,
                    NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective
                ],
                exports: [NgxSelectComponent,
                    NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { NGX_SELECT_OPTIONS, NgxSelectComponent, NgxSelectModule, NgxSelectOptGroup, NgxSelectOption, NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective };

//# sourceMappingURL=ngx-select-ex.js.map