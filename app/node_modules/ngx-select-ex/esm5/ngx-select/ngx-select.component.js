import { __decorate, __param, __read, __spread } from "tslib";
import { AfterContentChecked, DoCheck, Input, Output, ViewChild, Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild, TemplateRef, Optional, Inject, InjectionToken, ChangeDetectionStrategy, OnDestroy } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Subject, BehaviorSubject, EMPTY, of, from, merge, combineLatest } from 'rxjs';
import { tap, filter, map, share, flatMap, toArray, distinctUntilChanged } from 'rxjs/operators';
import * as lodashNs from 'lodash';
import * as escapeStringNs from 'escape-string-regexp';
import { NgxSelectOptGroup, NgxSelectOption } from './ngx-select.classes';
import { NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective } from './ngx-templates.directive';
var _ = lodashNs;
var escapeString = escapeStringNs;
export var NGX_SELECT_OPTIONS = new InjectionToken('NGX_SELECT_OPTIONS');
var ENavigation;
(function (ENavigation) {
    ENavigation[ENavigation["first"] = 0] = "first";
    ENavigation[ENavigation["previous"] = 1] = "previous";
    ENavigation[ENavigation["next"] = 2] = "next";
    ENavigation[ENavigation["last"] = 3] = "last";
    ENavigation[ENavigation["firstSelected"] = 4] = "firstSelected";
    ENavigation[ENavigation["firstIfOptionActiveInvisible"] = 5] = "firstIfOptionActiveInvisible";
})(ENavigation || (ENavigation = {}));
function propertyExists(obj, propertyName) {
    return propertyName in obj;
}
var NgxSelectComponent = /** @class */ (function () {
    function NgxSelectComponent(iterableDiffers, sanitizer, cd, defaultOptions) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.cd = cd;
        this.optionValueField = 'id';
        this.optionTextField = 'text';
        this.optGroupLabelField = 'label';
        this.optGroupOptionsField = 'options';
        this.multiple = false;
        this.allowClear = false;
        this.placeholder = '';
        this.noAutoComplete = false;
        this.disabled = false;
        this.defaultValue = [];
        this.autoSelectSingleOption = false;
        this.autoClearSearch = false;
        this.noResultsFound = 'No results found';
        this.size = 'default';
        this.autoActiveOnMouseEnter = true;
        this.showOptionNotFoundForEmptyItems = false;
        this.isFocused = false;
        this.keepSelectMenuOpened = false;
        this.autocomplete = 'off';
        this.dropDownMenuOtherClasses = '';
        this.keyCodeToRemoveSelected = 'Delete';
        this.keyCodeToOptionsOpen = ['Enter', 'NumpadEnter'];
        this.keyCodeToOptionsClose = 'Escape';
        this.keyCodeToOptionsSelect = ['Enter', 'NumpadEnter'];
        this.keyCodeToNavigateFirst = 'ArrowLeft';
        this.keyCodeToNavigatePrevious = 'ArrowUp';
        this.keyCodeToNavigateNext = 'ArrowDown';
        this.keyCodeToNavigateLast = 'ArrowRight';
        this.typed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.open = new EventEmitter();
        this.close = new EventEmitter();
        this.select = new EventEmitter();
        this.remove = new EventEmitter();
        this.navigated = new EventEmitter();
        this.selectionChanges = new EventEmitter();
        this.optionsOpened = false;
        this.actualValue = [];
        this.subjOptions = new BehaviorSubject([]);
        this.subjSearchText = new BehaviorSubject('');
        this.subjOptionsSelected = new BehaviorSubject([]);
        this.subjExternalValue = new BehaviorSubject([]);
        this.subjDefaultValue = new BehaviorSubject([]);
        this.subjRegisterOnChange = new Subject();
        this._focusToInput = false;
        //////////// interface ControlValueAccessor ////////////
        this.onChange = function (v) { return v; };
        this.onTouched = function () { return null; };
        Object.assign(this, defaultOptions);
        // DIFFERS
        this.itemsDiffer = iterableDiffers.find([]).create(null);
        this.defaultValueDiffer = iterableDiffers.find([]).create(null);
        // OBSERVERS
        this.typed.subscribe(function (text) { return _this.subjSearchText.next(text); });
        this.subjOptionsSelected.subscribe(function (options) { return _this.selectionChanges.emit(options); });
        var cacheExternalValue;
        // Get actual value
        var subjActualValue = combineLatest([
            merge(this.subjExternalValue.pipe(map(function (v) { return cacheExternalValue = v === null ? [] : [].concat(v); })), this.subjOptionsSelected.pipe(map(function (options) { return options.map(function (o) { return o.value; }); }))),
            this.subjDefaultValue
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 2), eVal = _b[0], dVal = _b[1];
            var newVal = _.isEqual(eVal, dVal) ? [] : eVal;
            return newVal.length ? newVal : dVal;
        }), distinctUntilChanged(function (x, y) { return _.isEqual(x, y); }), share());
        // Export actual value
        combineLatest([subjActualValue, this.subjRegisterOnChange])
            .pipe(map(function (_a) {
            var _b = __read(_a, 1), actualValue = _b[0];
            return actualValue;
        }))
            .subscribe(function (actualValue) {
            _this.actualValue = actualValue;
            if (!_.isEqual(actualValue, cacheExternalValue)) {
                cacheExternalValue = actualValue;
                if (_this.multiple) {
                    _this.onChange(actualValue);
                }
                else {
                    _this.onChange(actualValue.length ? actualValue[0] : null);
                }
            }
        });
        // Correct selected options when the options changed
        combineLatest([
            this.subjOptions.pipe(flatMap(function (options) { return from(options).pipe(flatMap(function (option) { return option instanceof NgxSelectOption
                ? of(option)
                : (option instanceof NgxSelectOptGroup ? from(option.options) : EMPTY); }), toArray()); })),
            subjActualValue
        ]).pipe(map(function (_a) {
            var _b = __read(_a, 2), optionsFlat = _b[0], actualValue = _b[1];
            var optionsSelected = [];
            actualValue.forEach(function (value) {
                var selectedOption = optionsFlat.find(function (option) { return option.value === value; });
                if (selectedOption) {
                    optionsSelected.push(selectedOption);
                }
            });
            if (_this.keepSelectedItems) {
                var optionValues_1 = optionsSelected.map(function (option) { return option.value; });
                var keptSelectedOptions = _this.subjOptionsSelected.value
                    .filter(function (selOption) { return optionValues_1.indexOf(selOption.value) === -1; });
                optionsSelected.push.apply(optionsSelected, __spread(keptSelectedOptions));
            }
            if (!_.isEqual(optionsSelected, _this.subjOptionsSelected.value)) {
                _this.subjOptionsSelected.next(optionsSelected);
                _this.cd.markForCheck();
            }
        })).subscribe();
        // Ensure working filter by a search text
        combineLatest([this.subjOptions, this.subjOptionsSelected, this.subjSearchText]).pipe(map(function (_a) {
            var _b = __read(_a, 3), options = _b[0], selectedOptions = _b[1], search = _b[2];
            _this.optionsFiltered = _this.filterOptions(search, options, selectedOptions).map(function (option) {
                if (option instanceof NgxSelectOption) {
                    option.highlightedText = _this.highlightOption(option);
                }
                else if (option instanceof NgxSelectOptGroup) {
                    option.options.map(function (subOption) {
                        subOption.highlightedText = _this.highlightOption(subOption);
                        return subOption;
                    });
                }
                return option;
            });
            _this.cacheOptionsFilteredFlat = null;
            _this.navigateOption(ENavigation.firstIfOptionActiveInvisible);
            _this.cd.markForCheck();
            return selectedOptions;
        }), flatMap(function (selectedOptions) { return _this.optionsFilteredFlat().pipe(filter(function (flatOptions) { return _this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length; })); })).subscribe(function (flatOptions) {
            _this.subjOptionsSelected.next(flatOptions);
            _this.cd.markForCheck();
        });
    }
    NgxSelectComponent_1 = NgxSelectComponent;
    Object.defineProperty(NgxSelectComponent.prototype, "inputText", {
        /** @internal */
        get: function () {
            if (this.inputElRef && this.inputElRef.nativeElement) {
                return this.inputElRef.nativeElement.value;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    NgxSelectComponent.prototype.setFormControlSize = function (otherClassNames, useFormControl) {
        if (otherClassNames === void 0) { otherClassNames = {}; }
        if (useFormControl === void 0) { useFormControl = true; }
        var formControlExtraClasses = useFormControl ? {
            'form-control-sm input-sm': this.size === 'small',
            'form-control-lg input-lg': this.size === 'large'
        } : {};
        return Object.assign(formControlExtraClasses, otherClassNames);
    };
    NgxSelectComponent.prototype.setBtnSize = function () {
        return { 'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large' };
    };
    Object.defineProperty(NgxSelectComponent.prototype, "optionsSelected", {
        get: function () {
            return this.subjOptionsSelected.value;
        },
        enumerable: true,
        configurable: true
    });
    NgxSelectComponent.prototype.mainClicked = function (event) {
        event.clickedSelectComponent = this;
        if (!this.isFocused) {
            this.isFocused = true;
            this.focus.emit();
        }
    };
    NgxSelectComponent.prototype.documentClick = function (event) {
        if (event.clickedSelectComponent !== this) {
            if (this.optionsOpened) {
                this.optionsClose();
                this.cd.detectChanges(); // fix error because of delay between different events
            }
            if (this.isFocused) {
                this.isFocused = false;
                this.blur.emit();
            }
        }
    };
    NgxSelectComponent.prototype.optionsFilteredFlat = function () {
        var _this = this;
        if (this.cacheOptionsFilteredFlat) {
            return of(this.cacheOptionsFilteredFlat);
        }
        return from(this.optionsFiltered).pipe(flatMap(function (option) {
            return option instanceof NgxSelectOption ? of(option) :
                (option instanceof NgxSelectOptGroup ? from(option.optionsFiltered) : EMPTY);
        }), filter(function (optionsFilteredFlat) { return !optionsFilteredFlat.disabled; }), toArray(), tap(function (optionsFilteredFlat) { return _this.cacheOptionsFilteredFlat = optionsFilteredFlat; }));
    };
    NgxSelectComponent.prototype.navigateOption = function (navigation) {
        var _this = this;
        this.optionsFilteredFlat().pipe(map(function (options) {
            var navigated = { index: -1, activeOption: null, filteredOptionList: options };
            var newActiveIdx;
            switch (navigation) {
                case ENavigation.first:
                    navigated.index = 0;
                    break;
                case ENavigation.previous:
                    newActiveIdx = options.indexOf(_this.optionActive) - 1;
                    navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;
                    break;
                case ENavigation.next:
                    newActiveIdx = options.indexOf(_this.optionActive) + 1;
                    navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;
                    break;
                case ENavigation.last:
                    navigated.index = options.length - 1;
                    break;
                case ENavigation.firstSelected:
                    if (_this.subjOptionsSelected.value.length) {
                        navigated.index = options.indexOf(_this.subjOptionsSelected.value[0]);
                    }
                    break;
                case ENavigation.firstIfOptionActiveInvisible:
                    var idxOfOptionActive = -1;
                    if (_this.optionActive) {
                        idxOfOptionActive = options.indexOf(options.find(function (x) { return x.value === _this.optionActive.value; }));
                    }
                    navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;
                    break;
            }
            navigated.activeOption = options[navigated.index];
            return navigated;
        })).subscribe(function (newNavigated) { return _this.optionActivate(newNavigated); });
    };
    NgxSelectComponent.prototype.ngDoCheck = function () {
        if (this.itemsDiffer.diff(this.items)) {
            this.subjOptions.next(this.buildOptions(this.items));
        }
        var defVal = this.defaultValue ? [].concat(this.defaultValue) : [];
        if (this.defaultValueDiffer.diff(defVal)) {
            this.subjDefaultValue.next(defVal);
        }
    };
    NgxSelectComponent.prototype.ngAfterContentChecked = function () {
        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&
            this.inputElRef.nativeElement !== document.activeElement) {
            this._focusToInput = false;
            this.inputElRef.nativeElement.focus();
        }
        if (this.choiceMenuElRef) {
            var ulElement = this.choiceMenuElRef.nativeElement;
            var element = ulElement.querySelector('a.ngx-select__item_active.active');
            if (element && element.offsetHeight > 0) {
                this.ensureVisibleElement(element);
            }
        }
    };
    NgxSelectComponent.prototype.ngOnDestroy = function () {
        this.cd.detach();
    };
    NgxSelectComponent.prototype.canClearNotMultiple = function () {
        return this.allowClear && !!this.subjOptionsSelected.value.length &&
            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);
    };
    NgxSelectComponent.prototype.focusToInput = function () {
        this._focusToInput = true;
    };
    NgxSelectComponent.prototype.inputKeyDown = function (event) {
        var keysForOpenedState = [].concat(this.keyCodeToOptionsSelect, this.keyCodeToNavigateFirst, this.keyCodeToNavigatePrevious, this.keyCodeToNavigateNext, this.keyCodeToNavigateLast);
        var keysForClosedState = [].concat(this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected);
        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {
            event.preventDefault();
            event.stopPropagation();
            switch (event.code) {
                case ([].concat(this.keyCodeToOptionsSelect).indexOf(event.code) + 1) && event.code:
                    this.optionSelect(this.optionActive);
                    this.navigateOption(ENavigation.next);
                    break;
                case this.keyCodeToNavigateFirst:
                    this.navigateOption(ENavigation.first);
                    break;
                case this.keyCodeToNavigatePrevious:
                    this.navigateOption(ENavigation.previous);
                    break;
                case this.keyCodeToNavigateLast:
                    this.navigateOption(ENavigation.last);
                    break;
                case this.keyCodeToNavigateNext:
                    this.navigateOption(ENavigation.next);
                    break;
            }
        }
        else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {
            event.preventDefault();
            event.stopPropagation();
            switch (event.code) {
                case ([].concat(this.keyCodeToOptionsOpen).indexOf(event.code) + 1) && event.code:
                    this.optionsOpen();
                    break;
                case this.keyCodeToRemoveSelected:
                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);
                    break;
            }
        }
    };
    NgxSelectComponent.prototype.trackByOption = function (index, option) {
        return option instanceof NgxSelectOption ? option.value :
            (option instanceof NgxSelectOptGroup ? option.label : option);
    };
    NgxSelectComponent.prototype.checkInputVisibility = function () {
        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);
    };
    /** @internal */
    NgxSelectComponent.prototype.inputKeyUp = function (value, event) {
        if (value === void 0) { value = ''; }
        if (event.code === this.keyCodeToOptionsClose) {
            this.optionsClose( /*true*/);
        }
        else if (this.optionsOpened && (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowDown'].indexOf(event.code) === -1) /*ignore arrows*/) {
            this.typed.emit(value);
        }
        else if (!this.optionsOpened && value) {
            this.optionsOpen(value);
        }
    };
    /** @internal */
    NgxSelectComponent.prototype.inputClick = function (value) {
        if (value === void 0) { value = ''; }
        if (!this.optionsOpened) {
            this.optionsOpen(value);
        }
    };
    /** @internal */
    NgxSelectComponent.prototype.sanitize = function (html) {
        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;
    };
    /** @internal */
    NgxSelectComponent.prototype.highlightOption = function (option) {
        if (this.inputElRef) {
            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);
        }
        return option.renderText(this.sanitizer, '');
    };
    /** @internal */
    NgxSelectComponent.prototype.optionSelect = function (option, event) {
        if (event === void 0) { event = null; }
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (option && !option.disabled) {
            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));
            this.select.emit(option.value);
            if (!this.keepSelectMenuOpened) {
                this.optionsClose( /*true*/);
            }
            this.onTouched();
        }
    };
    /** @internal */
    NgxSelectComponent.prototype.optionRemove = function (option, event) {
        if (!this.disabled && option) {
            event.stopPropagation();
            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(function (o) { return o !== option; }));
            this.remove.emit(option.value);
        }
    };
    /** @internal */
    NgxSelectComponent.prototype.optionActivate = function (navigated) {
        if ((this.optionActive !== navigated.activeOption) &&
            (!navigated.activeOption || !navigated.activeOption.disabled)) {
            if (this.optionActive) {
                this.optionActive.active = false;
            }
            this.optionActive = navigated.activeOption;
            if (this.optionActive) {
                this.optionActive.active = true;
            }
            this.navigated.emit(navigated);
            this.cd.detectChanges();
        }
    };
    /** @internal */
    NgxSelectComponent.prototype.onMouseEnter = function (navigated) {
        if (this.autoActiveOnMouseEnter) {
            this.optionActivate(navigated);
        }
    };
    NgxSelectComponent.prototype.filterOptions = function (search, options, selectedOptions) {
        var _this = this;
        var regExp = new RegExp(escapeString(search), 'i'), filterOption = function (option) {
            if (_this.searchCallback) {
                return _this.searchCallback(search, option);
            }
            return (!search || regExp.test(option.text)) && (!_this.multiple || selectedOptions.indexOf(option) === -1);
        };
        return options.filter(function (option) {
            if (option instanceof NgxSelectOption) {
                return filterOption(option);
            }
            else if (option instanceof NgxSelectOptGroup) {
                var subOp = option;
                subOp.filter(function (subOption) { return filterOption(subOption); });
                return subOp.optionsFiltered.length;
            }
        });
    };
    NgxSelectComponent.prototype.ensureVisibleElement = function (element) {
        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {
            this.cacheElementOffsetTop = element.offsetTop;
            var container = this.choiceMenuElRef.nativeElement;
            if (this.cacheElementOffsetTop < container.scrollTop) {
                container.scrollTop = this.cacheElementOffsetTop;
            }
            else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {
                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;
            }
        }
    };
    NgxSelectComponent.prototype.showChoiceMenu = function () {
        return this.optionsOpened && (!!this.subjOptions.value.length || this.showOptionNotFoundForEmptyItems);
    };
    NgxSelectComponent.prototype.optionsOpen = function (search) {
        if (search === void 0) { search = ''; }
        if (!this.disabled) {
            this.optionsOpened = true;
            this.subjSearchText.next(search);
            if (!this.multiple && this.subjOptionsSelected.value.length) {
                this.navigateOption(ENavigation.firstSelected);
            }
            else {
                this.navigateOption(ENavigation.first);
            }
            this.focusToInput();
            this.open.emit();
            this.cd.markForCheck();
        }
    };
    NgxSelectComponent.prototype.optionsClose = function ( /*focusToHost: boolean = false*/) {
        this.optionsOpened = false;
        // if (focusToHost) {
        //     const x = window.scrollX, y = window.scrollY;
        //     this.mainElRef.nativeElement.focus();
        //     window.scrollTo(x, y);
        // }
        this.close.emit();
        if (this.autoClearSearch && this.multiple && this.inputElRef) {
            this.inputElRef.nativeElement.value = null;
        }
    };
    NgxSelectComponent.prototype.buildOptions = function (data) {
        var _this = this;
        var result = [];
        if (Array.isArray(data)) {
            data.forEach(function (item) {
                var isOptGroup = typeof item === 'object' && item !== null &&
                    propertyExists(item, _this.optGroupLabelField) && propertyExists(item, _this.optGroupOptionsField) &&
                    Array.isArray(item[_this.optGroupOptionsField]);
                if (isOptGroup) {
                    var optGroup_1 = new NgxSelectOptGroup(item[_this.optGroupLabelField]);
                    item[_this.optGroupOptionsField].forEach(function (subOption) {
                        var opt = _this.buildOption(subOption, optGroup_1);
                        if (opt) {
                            optGroup_1.options.push(opt);
                        }
                    });
                    result.push(optGroup_1);
                }
                else {
                    var option = _this.buildOption(item, null);
                    if (option) {
                        result.push(option);
                    }
                }
            });
        }
        return result;
    };
    NgxSelectComponent.prototype.buildOption = function (data, parent) {
        var value, text, disabled;
        if (typeof data === 'string' || typeof data === 'number') {
            value = text = data;
            disabled = false;
        }
        else if (typeof data === 'object' && data !== null &&
            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {
            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];
            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];
            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;
        }
        else {
            return null;
        }
        return new NgxSelectOption(value, text, disabled, data, parent);
    };
    NgxSelectComponent.prototype.writeValue = function (obj) {
        this.subjExternalValue.next(obj);
    };
    NgxSelectComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
        this.subjRegisterOnChange.next();
    };
    NgxSelectComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NgxSelectComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    };
    var NgxSelectComponent_1;
    NgxSelectComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: DomSanitizer },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [NGX_SELECT_OPTIONS,] }, { type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "items", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "optionValueField", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "optionTextField", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "optGroupLabelField", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "optGroupOptionsField", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "multiple", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "allowClear", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "noAutoComplete", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "disabled", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "defaultValue", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "autoSelectSingleOption", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "autoClearSearch", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "noResultsFound", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "keepSelectedItems", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "size", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "searchCallback", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "autoActiveOnMouseEnter", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "showOptionNotFoundForEmptyItems", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "isFocused", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "keepSelectMenuOpened", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "autocomplete", void 0);
    __decorate([
        Input()
    ], NgxSelectComponent.prototype, "dropDownMenuOtherClasses", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "typed", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "focus", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "blur", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "open", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "close", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "select", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "remove", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "navigated", void 0);
    __decorate([
        Output()
    ], NgxSelectComponent.prototype, "selectionChanges", void 0);
    __decorate([
        ViewChild('main', { static: true })
    ], NgxSelectComponent.prototype, "mainElRef", void 0);
    __decorate([
        ViewChild('input')
    ], NgxSelectComponent.prototype, "inputElRef", void 0);
    __decorate([
        ViewChild('choiceMenu')
    ], NgxSelectComponent.prototype, "choiceMenuElRef", void 0);
    __decorate([
        ContentChild(NgxSelectOptionDirective, { read: TemplateRef, static: true })
    ], NgxSelectComponent.prototype, "templateOption", void 0);
    __decorate([
        ContentChild(NgxSelectOptionSelectedDirective, { read: TemplateRef, static: true })
    ], NgxSelectComponent.prototype, "templateSelectedOption", void 0);
    __decorate([
        ContentChild(NgxSelectOptionNotFoundDirective, { read: TemplateRef, static: true })
    ], NgxSelectComponent.prototype, "templateOptionNotFound", void 0);
    __decorate([
        HostListener('document:focusin', ['$event']),
        HostListener('document:click', ['$event'])
    ], NgxSelectComponent.prototype, "documentClick", null);
    NgxSelectComponent = NgxSelectComponent_1 = __decorate([
        Component({
            selector: 'ngx-select',
            template: "<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\n     [ngClass]=\"setFormControlSize({\n        'ngx-select_multiple form-control': multiple === true,\n        'open show': optionsOpened && optionsFiltered.length\n     }, multiple === true)\"\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\">\n    <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\n\n    <!-- single selected item -->\n    <div class=\"ngx-select__selected\"\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n        <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\n             (click)=\"optionsOpen()\">\n\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\n                <span [innerHtml]=\"placeholder\"></span>\n            </span>\n            <span *ngIf=\"optionsSelected.length\"\n                  class=\"ngx-select__selected-single pull-left float-left\"\n                  [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                          text: sanitize(optionsSelected[0].text)}\">\n                </ng-container>\n            </span>\n            <span class=\"ngx-select__toggle-buttons\">\n                <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\n                   [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(optionsSelected[0], $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n                <i class=\"dropdown-toggle\"></i>\n                <i class=\"ngx-select__toggle-caret caret\"></i>\n            </span>\n        </div>\n    </div>\n\n    <!-- multiple selected items -->\n    <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\" (click)=\"inputClick(inputElRef && inputElRef['value'])\">\n        <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\n            <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\" (click)=\"$event.stopPropagation()\"\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-sm btn-xs\">\n\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                </ng-container>\n\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(option, $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n            </span>\n        </span>\n    </div>\n\n    <!-- live search an item from the list -->\n    <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\n           *ngIf=\"checkInputVisibility()\"\n           [tabindex]=\"multiple === false? -1: 0\"\n           (keyup)=\"inputKeyUp(input.value, $event)\"\n           [disabled]=\"disabled\"\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\n           (click)=\"inputClick(input.value)\"\n           [autocomplete]=\"autocomplete\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           role=\"combobox\">\n\n    <!-- options template -->\n    <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\n        [ngClass]=\"dropDownMenuOtherClasses\"\n        [class.show]=\"showChoiceMenu()\">\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n            <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n               [ngClass]=\"{\n                    'ngx-select__item_active active': option.active,\n                    'ngx-select__item_disabled disabled': option.disabled\n               }\"\n               (mouseenter)=\"onMouseEnter({\n                    activeOption: option,\n                    filteredOptionList: optionsFiltered,\n                    index: optionsFiltered.indexOf(option)\n               })\"\n               (click)=\"optionSelect(option, $event)\">\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: option.highlightedText,\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\n            </a>\n        </li>\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"\n                          [ngTemplateOutletContext]=\"{$implicit: inputText}\"></ng-container>\n        </li>\n    </ul>\n\n    <!--Default templates-->\n    <ng-template #defaultTemplateOption let-text=\"text\">\n        <span [innerHtml]=\"text\"></span>\n    </ng-template>\n\n    <ng-template #defaultTemplateOptionNotFound>\n        {{noResultsFound}}\n    </ng-template>\n\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return NgxSelectComponent_1; }),
                    multi: true
                }
            ],
            styles: [".ngx-select_multiple{height:auto;padding:3px 3px 0}.ngx-select_multiple .ngx-select__search{background-color:transparent!important;border:none;outline:0;box-shadow:none;height:1.6666em;padding:0;margin-bottom:3px}.ngx-select__disabled{background-color:#eceeef;border-radius:4px;position:absolute;width:100%;height:100%;z-index:5;opacity:.6;top:0;left:0;cursor:not-allowed}.ngx-select__toggle{outline:0;position:relative;text-align:left!important;color:#333;background-color:#fff;border-color:#ccc;display:inline-flex;align-items:stretch;justify-content:space-between}.ngx-select__toggle:hover{color:#333;background-color:#e6e6e6;border-color:#adadad}.ngx-select__toggle-buttons{flex-shrink:0;display:flex;align-items:center}.ngx-select__toggle-caret{position:absolute;height:10px;top:50%;right:10px;margin-top:-2px}.ngx-select__placeholder{float:left;max-width:100%;text-overflow:ellipsis;overflow:hidden}.ngx-select__clear{margin-right:10px;padding:0;border:none}.ngx-select_multiple .ngx-select__clear{line-height:initial;margin-left:5px;margin-right:0;color:#000;opacity:.5}.ngx-select__clear-icon{display:inline-block;font-size:inherit;cursor:pointer;position:relative;width:1em;height:.75em;padding:0}.ngx-select__clear-icon:after,.ngx-select__clear-icon:before{content:\"\";position:absolute;border-top:3px solid;width:100%;top:50%;left:0;margin-top:-1px}.ngx-select__clear-icon:before{transform:rotate(45deg)}.ngx-select__clear-icon:after{transform:rotate(-45deg)}.ngx-select__choices{width:100%;height:auto;max-height:200px;overflow-x:hidden;margin-top:0;position:absolute}.ngx-select_multiple .ngx-select__choices{margin-top:1px}.ngx-select__item{display:block;padding:3px 20px;clear:both;font-weight:400;line-height:1.42857143;white-space:nowrap;cursor:pointer;text-decoration:none}.ngx-select__item_disabled,.ngx-select__item_no-found{cursor:default}.ngx-select__item_active{color:#fff;outline:0;background-color:#428bca}.ngx-select__selected-plural,.ngx-select__selected-single{display:inline-flex;align-items:center;overflow:hidden}.ngx-select__selected-plural span,.ngx-select__selected-single span{overflow:hidden;text-overflow:ellipsis}.ngx-select__selected-plural{outline:0;margin:0 3px 3px 0}.input-group>.dropdown{position:static}"]
        }),
        __param(3, Inject(NGX_SELECT_OPTIONS)), __param(3, Optional())
    ], NgxSelectComponent);
    return NgxSelectComponent;
}());
export { NgxSelectComponent };
//# sourceMappingURL=data:application/json;base64,