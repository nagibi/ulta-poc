import * as escapeStringNs from 'escape-string-regexp';
var escapeString = escapeStringNs;
var NgxSelectOption = /** @class */ (function () {
    function NgxSelectOption(value, text, disabled, data, _parent) {
        if (_parent === void 0) { _parent = null; }
        this.value = value;
        this.text = text;
        this.disabled = disabled;
        this.data = data;
        this._parent = _parent;
        this.type = 'option';
        this.cacheRenderedText = null;
    }
    Object.defineProperty(NgxSelectOption.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    NgxSelectOption.prototype.renderText = function (sanitizer, highlightText) {
        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {
            this.cacheHighlightText = highlightText;
            if (this.cacheHighlightText) {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'));
            }
            else {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);
            }
        }
        return this.cacheRenderedText;
    };
    return NgxSelectOption;
}());
export { NgxSelectOption };
var NgxSelectOptGroup = /** @class */ (function () {
    function NgxSelectOptGroup(label, options) {
        if (options === void 0) { options = []; }
        this.label = label;
        this.options = options;
        this.type = 'optgroup';
        this.filter(function () { return true; });
    }
    NgxSelectOptGroup.prototype.filter = function (callbackFn) {
        this.optionsFiltered = this.options.filter(function (option) { return callbackFn(option); });
    };
    return NgxSelectOptGroup;
}());
export { NgxSelectOptGroup };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNlbGVjdC5jbGFzc2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNlbGVjdC1leC8iLCJzb3VyY2VzIjpbIm5neC1zZWxlY3Qvbmd4LXNlbGVjdC5jbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxjQUFjLE1BQU0sc0JBQXNCLENBQUM7QUFHdkQsSUFBTSxZQUFZLEdBQUcsY0FBYyxDQUFDO0FBRXBDO0lBTUkseUJBQW1CLEtBQXNCLEVBQ3RCLElBQVksRUFDWixRQUFpQixFQUNqQixJQUFTLEVBQ1IsT0FBaUM7UUFBakMsd0JBQUEsRUFBQSxjQUFpQztRQUpsQyxVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUN0QixTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixTQUFJLEdBQUosSUFBSSxDQUFLO1FBQ1IsWUFBTyxHQUFQLE9BQU8sQ0FBMEI7UUFUNUMsU0FBSSxHQUF5QixRQUFRLENBQUM7UUFpQnZDLHNCQUFpQixHQUFhLElBQUksQ0FBQztJQVAzQyxDQUFDO0lBRUQsc0JBQVcsbUNBQU07YUFBakI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFLTSxvQ0FBVSxHQUFqQixVQUFrQixTQUF1QixFQUFFLGFBQXFCO1FBQzVELElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLGFBQWEsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssSUFBSSxFQUFFO1lBQzlFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUM7WUFDeEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FDL0UsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUNqRixDQUFDLENBQUM7YUFDTjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6RTtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDbEMsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQWpDRCxJQWlDQzs7QUFFRDtJQUtJLDJCQUFtQixLQUFhLEVBQ2IsT0FBK0I7UUFBL0Isd0JBQUEsRUFBQSxZQUErQjtRQUQvQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBd0I7UUFMekMsU0FBSSxHQUF5QixVQUFVLENBQUM7UUFNN0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFTSxrQ0FBTSxHQUFiLFVBQWMsVUFBMkM7UUFDckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQXVCLElBQUssT0FBQSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBQ0wsd0JBQUM7QUFBRCxDQUFDLEFBYkQsSUFhQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RG9tU2FuaXRpemVyLCBTYWZlSHRtbH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgKiBhcyBlc2NhcGVTdHJpbmdOcyBmcm9tICdlc2NhcGUtc3RyaW5nLXJlZ2V4cCc7XG5pbXBvcnQge0lOZ3hTZWxlY3RPcHRHcm91cCwgSU5neFNlbGVjdE9wdGlvbiwgSU5neFNlbGVjdE9wdGlvbkJhc2UsIFROZ3hTZWxlY3RPcHRpb25UeXBlfSBmcm9tICcuL25neC1zZWxlY3QuaW50ZXJmYWNlcyc7XG5cbmNvbnN0IGVzY2FwZVN0cmluZyA9IGVzY2FwZVN0cmluZ05zO1xuXG5leHBvcnQgY2xhc3MgTmd4U2VsZWN0T3B0aW9uIGltcGxlbWVudHMgSU5neFNlbGVjdE9wdGlvbiwgSU5neFNlbGVjdE9wdGlvbkJhc2Uge1xuICAgIHJlYWRvbmx5IHR5cGU6IFROZ3hTZWxlY3RPcHRpb25UeXBlID0gJ29wdGlvbic7XG5cbiAgICBoaWdobGlnaHRlZFRleHQ6IFNhZmVIdG1sO1xuICAgIGFjdGl2ZTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nLFxuICAgICAgICAgICAgICAgIHB1YmxpYyB0ZXh0OiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgcHVibGljIGRpc2FibGVkOiBib29sZWFuLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBkYXRhOiBhbnksXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfcGFyZW50OiBOZ3hTZWxlY3RPcHRHcm91cCA9IG51bGwpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHBhcmVudCgpOiBOZ3hTZWxlY3RPcHRHcm91cCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWNoZUhpZ2hsaWdodFRleHQ6IHN0cmluZztcbiAgICBwcml2YXRlIGNhY2hlUmVuZGVyZWRUZXh0OiBTYWZlSHRtbCA9IG51bGw7XG5cbiAgICBwdWJsaWMgcmVuZGVyVGV4dChzYW5pdGl6ZXI6IERvbVNhbml0aXplciwgaGlnaGxpZ2h0VGV4dDogc3RyaW5nKTogU2FmZUh0bWwge1xuICAgICAgICBpZiAodGhpcy5jYWNoZUhpZ2hsaWdodFRleHQgIT09IGhpZ2hsaWdodFRleHQgfHwgdGhpcy5jYWNoZVJlbmRlcmVkVGV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZUhpZ2hsaWdodFRleHQgPSBoaWdobGlnaHRUZXh0O1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FjaGVIaWdobGlnaHRUZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZVJlbmRlcmVkVGV4dCA9IHNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCgodGhpcy50ZXh0ICsgJycpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoZXNjYXBlU3RyaW5nKHRoaXMuY2FjaGVIaWdobGlnaHRUZXh0KSwgJ2dpJyksICc8c3Ryb25nPiQmPC9zdHJvbmc+J1xuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhY2hlUmVuZGVyZWRUZXh0ID0gc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHRoaXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZW5kZXJlZFRleHQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmd4U2VsZWN0T3B0R3JvdXAgaW1wbGVtZW50cyBJTmd4U2VsZWN0T3B0R3JvdXAsIElOZ3hTZWxlY3RPcHRpb25CYXNlIHtcbiAgICByZWFkb25seSB0eXBlOiBUTmd4U2VsZWN0T3B0aW9uVHlwZSA9ICdvcHRncm91cCc7XG5cbiAgICBwdWJsaWMgb3B0aW9uc0ZpbHRlcmVkOiBOZ3hTZWxlY3RPcHRpb25bXTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBsYWJlbDogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBvcHRpb25zOiBOZ3hTZWxlY3RPcHRpb25bXSA9IFtdKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWx0ZXIoY2FsbGJhY2tGbjogKHZhbHVlOiBOZ3hTZWxlY3RPcHRpb24pID0+IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLm9wdGlvbnNGaWx0ZXJlZCA9IHRoaXMub3B0aW9ucy5maWx0ZXIoKG9wdGlvbjogTmd4U2VsZWN0T3B0aW9uKSA9PiBjYWxsYmFja0ZuKG9wdGlvbikpO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgVFNlbGVjdE9wdGlvbiA9IE5neFNlbGVjdE9wdEdyb3VwIHwgTmd4U2VsZWN0T3B0aW9uO1xuIl19